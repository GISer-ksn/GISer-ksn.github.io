<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WebGIS笔记</title>
      <link href="/2021/03/27/WebGIS%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/03/27/WebGIS%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="GML、SVG、VML的比较"><a href="#GML、SVG、VML的比较" class="headerlink" title="GML、SVG、VML的比较"></a>GML、SVG、VML的比较</h1><p>GML、SVG和VML都是基于XML的可用来描述矢量图形的标记语言，都是XML词表，它们的语法并不难理解，但它们都有各自不同的用途和特点，下面简单介绍一下。 GML(Geography Markup Language)<br>是基于XML的空间信息编码标准，由OpenGIS Consortium (OGC)提出，得到了许多公司的大力支持，如Oracle、Galdos、MapInfo、CubeWerx等。运用GML，封装的地理数据和图形解释是清楚分离的。 </p><ul><li>GML基于XML用文本表示地理信息</li></ul><p>由于GML可看成是XML的一个具体的词表，熟悉了XML就比较容易理解GML。而且随着XML的应用日益广泛，GML也将受益。另外文本比较简单、直观，容易理解和编辑。 </p><ul><li>GML封装了地理信息及其属性</li></ul><p>GML基于地理信息抽象模型，即空间实体特征及属性封装。地理特征包括一系列的属性和相应的几何信息，一般来说属性由名字、类型和值组成，几何信息由基本元素如点、线、面、曲线、多边形等组成。目前GML主要局限在二维应用，正扩展到二维半和三维空间以及特征间的拓扑关系。GML允许相当复杂的特征，如特征间的嵌套。例如飞机场由出租汽车道、飞机跑道等组成。 </p><ul><li>GML封装了空间地理参考系统</li></ul><p>空间地理参考系统是地理信息系统数据处理的基础。GML封装了空间地理参考系统、主要的投影关系等，保证分布式处理的扩展性和灵活性。 </p><ul><li>GML可以实现地理数据的分布式存储</li></ul><p>GML对地理数据的分发是非常方便的技术手段，但其作用不止局限于此，同样可以成为地理数据分布式存储的重要手段。主要的技术工具是XLink和Xpointer。 </p><p>从上边的介绍可以看出GML作为描述空间信息的元语言的一些优点。它只能描述空间实体的矢量信息和属性，具体显示的时候可采用两种不同的途径：<br>GML Drawà Display<br>GML Transform. à SVG, VML Draw àDisplay<br>第一种途径需要直接操作GML数据进行分析并显示。<br>第二种途径是把GML数据转换成相应的图形格式的数据，例如SVG,VML及X3D。然后由已经存在的支持这几种图形格式的软件进行显示。下面介绍一下SVG和VML。 </p><p>VML(Vector Markup Language)<br>是一个最初由Microsoft开发的XML词表，现在也只有IE5.0以上版本对VML提供支持。使用VML可以在IE中绘制矢量图形，所以有人认为VML就是在IE中实现了画笔的功能。下面介绍一下VML的优点： </p><ul><li>基于XML标准</li></ul><p>XML是公认拥有无穷生命力的下一代网络标记语言， VML具有先天的优势，它的表示方法简单，易于扩展等等。 </p><ul><li>支持高质量的矢量图形显示</li></ul><p>VML 支持广泛的矢量图形特征，它们基于由相连接的直线和曲线描述路径。在VML中使用两个基本的元素：shape和group。这两个元素定义了VML的全部结构；shape描述一个矢量图形元素，而group用来将这些图形结合起来，这样它们可以作为一个整体进行处理。<br>VML规范包括大量的支持多种不同矢量图形特征的元素。下面是VML的预定义图形元素：<br>l Shape<br>l Path<br>l Line<br>l Polyline<br>l Curve<br>l Rect<br>l Roundrect<br>l Oval<br>l Arc<br>l Group<br>由文本构成的图像，并可集成到HTML<br>由于VML使用简单的文本来表示图像，这样就可用很少的字节来表示比较复杂的图像。VML与HTML兼容，通过在HTML中声明VML命名空间并声明处理函数，就可以和其他HTML元素一样使用VML元素，在客户端浏览器显示图像。VML标记里面可以定义DHTML大部分属性和事件，比如说id, name, title, onmouseover 等等。 </p><ul><li>支持交互与动画</li></ul><p>但VML的功能不只是绘图，他还可以在图形中嵌入文本，并可实现超链，还可通过脚本语言实现一定的动画功能。VML赏析 </p><p>SVG(Scalable Vector Graphics)<br>SVG 是一种基于XML的开放的矢量图形描述语言。SVG图像是与XML1.0兼容的文档，SVG元素是指示如何绘制图像的一些指令，阅读器(Viewer)解释这些指令，把SVG图像在指定设备上显示出来。使用SVG可以在网页上显示出各种各样的高质量的矢量图形，支持很多您想象得出的功能：几何图形、动画、渐变色、滤镜效果等。最关键的是，它也是完全用普通文本来描述的！也就是说，这是一种专门为网络而设计的基于文本的图像格式。<br>SVG是对PGML和VML的一种综合,所以VML的优点也就成为SVG的优点，例如：<br>基于XML标准<br>高质量的矢量图像<br>由文本构成的图像<br>我们可以不用任何图像处理工具，仅仅用记事本就可以生成一个SVG图像。这对于图像处理的工作者来说可能会感到不可思议。其实仔细想想也可以理解，矢量图像一般是以算法指令来描述，建立在文本基础上的SVG图像中所有的描述语句都可以直接观察到，所以也非常容易进行二次修改与更新，”可升级”的特点在这里可以得到恰当的反映。<br>另外，与VML相比SVG还有一些优点：<br>灵活的文件格式<br>SVG可升级的特性不仅仅表现在二次修改方面，还表现在另外很多地方，包括这里介绍的灵活的文件格式。在以前的图像中，文本都作为位图而保存于图像中，图像形成以后不能单独对文本进行修改；在PNG格式中这一点有所改进，文本可作为一个独立的层存在；SVG更灵活地扩展了图像的文件格式，它由三个部分组成：矢量图形、位图和文字。这样SVG不仅仅可以应用矢量图像和文字对象，同样可以纳入位图，可以制作出任何其它格式图像能达到的效果。由于文件格式是文本形式的，可以很容易地在以后任何时候进行修改。而且在页面运行的过程中，也可以对很多部分做即时的修改，其中的图形描述还可以重复使用。<br>支持交互和动画<br>SVG支持SMIL（synchronized multimedia integration language），使得用户可以自由的同SVG中的元素完成一些交互的动作，从而完成既定的目标，这一点在目前单独依靠图片是完成不了的，需要由网页中的脚本语句来实现。<br>支持字符查找<br>查找”图片”中的字符，在SVG中成为可能。而这在其它格式的图片文件中则是不可能的。<br>支持Xlink 和Xpointer<br>  这样就可以在SVG文档之间制作超级链接。<br>SVG 作为W3C组织正式推荐的图像格式，拥有众多的支持机构。像Adobe公司已经宣称将在推出的Adobe图像处理套件如Illustrator、 Photoshop、GoLive和Cyber Studio中集成SVG的全部功能，并且还提供Netscape Navigator和IE的插件，以便使其能够直接支持SVG文件的浏览。Netscape和Microsoft公司也已经开始进军SVG领域，这标志着未来的网络浏览器将会内置对SVG文件的支持功能。 </p><p>总结 GML、SVG、VML都与矢量图形有着密切的关系：GML在表示实体的空间信息的同时加入了实体的其他属性信息，是表示实体的空间信息和属性的编码标准，但它并不支持直接显示图形。而VML和SVG是在表示图形的矢量信息同时加入了图形的显示信息（即以什么样的样式显示矢量图形），是显示矢量图形的两种比较好的格式。相比之下，SVG是综合了VML的优点后推出的，是国际标准，它比VML具有更多的优点，也有更广阔的前景。但由于VML有IE的支持，而SVG要想在浏览器中显示就需要安装插件，在这一点上，VML优于SVG。</p><h1 id="介绍一下OGC、WMS、WFS、WCS等几个概念"><a href="#介绍一下OGC、WMS、WFS、WCS等几个概念" class="headerlink" title="介绍一下OGC、WMS、WFS、WCS等几个概念"></a>介绍一下OGC、WMS、WFS、WCS等几个概念</h1><p>1.OGC </p><p>​    Open Geospatial Consortium——开放地理信息联盟，是一个非盈利的志愿的国际标准化组织，引领着空间地理信息标准及定位基本服务的发展目前在空间数据互操作领域，基于公共接口访问模式的互操作方法是一种基本的操作方法。通过国际标准化组织（ISO/TC211）或技术联盟（如OGC）制定空间数据互操作的接口规范，GIS软件商开发遵循这一接口规范的空间数据的读写函数，可以实现异构空间数据库的互操作。基于http（Web）XML的空间数据互操作是一个很热门的研究方向，主要涉及Web Service的相关技术。OGC和ISO/TC211共同推出了基于Web服务（XML）的空间数据互操作实现规范Web Map Service，Web Feature Service，Web Coverage Service以及用于空间数据传输与转换的地理信息标记语言GML。 </p><p>2.Web地图服务（WMS） </p><p>ps：推荐 快</p><p>​    利用具有地理空间位置信息的数据制作地图。其中将地图定义为地理数据可视的表现。这个规范定义了三个操作：GetCapabitities返回服务级元数据，它是对服务信息内容和要求参数的一种描述； GetMap返回一个地图影像，其地理空间参考和大小参数是明确定义了的；GetFeatureInfo（可选）返回显示在地图上的某些特殊要素的信息 </p><p>3.Web要素服务（WFS） </p><p>​     Web地图服务返回的是图层级的地图影像，Web要素服务（WFS）返回的是要素级的GML编码，并提供对要素的增加、修改、删除等事务操作，是对Web地图服务的进一步深入。OGC Web要素服务允许客户端从多个Web要素服务中取得使用地理标记语言（GML）编码的地理空间数据，这个远东定义了五个操作：GetCapabilites返回Web要素服务性能描述文档（用XML描述）；DescribeFeatureType返回描述可以提供服务的任何要素结构的XML文档；GetFeature为一个获取要素实例的请求提供服务；Transaction为事务请求提供服务；LockFeature处理在一个事务期间对一个或多个要素类型实例上锁的请求。 </p><p>4.Web覆盖服务（WCS）面向空间影像数据，它将包含地理位置值的地理空间数据作为“覆盖（COverage）”在网上相互交换。网络覆盖服务由三种操作组成：GetCapabilities，GetCoverage和DescribeCoverageType。GetCapabilities操作返回描述服务和数据集的XML文档。网络覆盖服务中的GetCoverage操作是在GetCapabilities确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的覆盖格式返回地理位置的值或属性。DescribeCoverageType操作允许客户端请求由具体的WCS服务器提供的任一覆盖层的完全描述。 </p><p>以上三个规范既可以做为Web服务的空间数据服务规范，又可以做为空间数据的互操作实现远东。只要某一个GIS软件支持这个接口，部署在本地服务器上，其他GIS软件就可以通过这个接口得到所需要的数据。从技术实现的角度，可以将Web服务理解为一个应用程序，它向外界暴露出一个能通过Web进行调用的接口，允许被任何平台、任何系统，用任何语言编写的程序调用。这个应用程序可以用现有的各种编程语言实现。Web服务最大的特点是可以实现跨平台、跨语言、跨硬件的互操作，正是Web服务中的SOAP、WSDL和UDDI保证了Web服务的跨平台互操作的特性，所以，如何使用SOAP、WSDL和UDDI来部署、描述、传输和注册一个Web服务是实现Web服务的关键。由于SOAP、WSDL和UDDI是一套标准，不同的厂商可以有实现这些标准的不同产品，例如SUN、APACHE、IBM、Borland等公司推出的基于JAVA平台的Web服务工具包，以及微软提出的.NET平台等，这些工具为实现Web服务的开发、部署、描述提供了方便的工具，极大的降低了开发Web服务的复杂度。</p><h1 id="开源GIS之WMS：动态绘制地图"><a href="#开源GIS之WMS：动态绘制地图" class="headerlink" title="开源GIS之WMS：动态绘制地图"></a>开源GIS之WMS：动态绘制地图</h1><h3 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a><strong>0、前言</strong></h3><p>有多种方法在网页浏览器中显示地图：</p><ul><li><p>第一种是将服务器中事先绘制好的地图图像（即地图切片），发送给浏览器  ——  瓦片地图</p></li><li><p>第二种是从服务器上返回一串代表空间图形与属性的文本，然后在浏览器端绘制  ——  <strong>WFS</strong>（Web要素服务）</p></li><li><p>第三种是在服务器端根据请求的内容绘制一个地图图像（在服务器端绘制），然后返回给客户端。  ——  <strong>WMS</strong>（Web地图服务） </p><p>WMS因为每次都是根据用户请求参数，随时绘制地图，图像反映数据的最新情况，因此该方式通常称为<strong>动态地图服务</strong>。而切片地图方式只反映了生成地图切片时的数据状况。</p></li></ul><h3 id="1、动态绘制地图的优点"><a href="#1、动态绘制地图的优点" class="headerlink" title="1、动态绘制地图的优点"></a><strong>1、动态绘制地图的优点</strong></h3><p>  由于动态地图服务是在请求时访问数据并绘制的，因此对于要显示数据最新状态的需求最为有用。对于同一时间改变位置的地理要素（例如，要绘制一个大型车队中各车辆的位置），使用动态地图服务方式来绘制是最佳的选择。</p><p>  此外，对于那些使用切片地图来说难以生成切片、难以存储或维护的大范围地图，动态地图也是最佳的解决方案。</p><p>  通过WMS来动态绘制地图时可以使用许多符号，还可以使用<strong>样式化图层描述符（Styled Layer Descriptors，SLD）</strong>。如果喜欢QGIS来制图，那么还可以使用其输出SLD，并将其导入到GeoServer中，这样便可以让互联网的用户也可在客户端GIS中使用同样的样式。此外，在服务器上绘制地图可以使用很复杂的符号，通常在网页浏览器中直接绘图只能使用简单的符号。</p><h3 id="2、动态绘制地图的缺点"><a href="#2、动态绘制地图的缺点" class="headerlink" title="2、动态绘制地图的缺点"></a><strong>2、动态绘制地图的缺点</strong></h3><p>  等待服务器来绘制地图是一个缓慢痛苦的经历，尤其是有许多层要渲染时。对于桌面应用，2~3秒钟的等待时间被认为是可接受，但对于“刁钻“的互联网地图用户来说，就不可接受了，因为他们既不是GIS相关专业，也不懂后端技术。现在，人们期待每一个地图应用像谷歌地图的响应速度一样，而这不使用地图切片是难以实现的。</p><p>  如果某一个Web GIS有许多用户同时请求地图，那么动态地图服务便容易超负荷运行。而这就导致了两难境地：你希望地图有用，但如果服务器使用的技术是不可扩展的话，用户越多，响应越慢。</p><p>  如果知道只有有限的用户访问地图应用，例如企业内部使用的Web GIS，使用动态绘图服务能满足用户体验要求，那么也可以不使用地图切片，从而节省了生成与维护地图切片工作。</p>]]></content>
      
      
      <categories>
          
          <category> Web GIS </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web GIS </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers概述</title>
      <link href="/2021/02/15/OpenLayers%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/02/15/OpenLayers%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、OpenLayers概述"><a href="#一、OpenLayers概述" class="headerlink" title="一、OpenLayers概述"></a>一、OpenLayers概述</h3><p><strong>1.OpenLayers核心职责</strong></p><p>  <a href="https://link.jianshu.com/?t=http%3A%2F%2Fopenlayers.org%2F" target="_blank" rel="noopener">OpenLayers</a>最新大版本是openlayers4，它是一个基于h5的GIS前端库，地图渲染方式为Canvas和WebGL，常用Canvas展示二维地图，支持WebGL渲染显示出将来的OpenLayers有支持三维方向的可能。OpenLayers作为一个地图前端库主要负责GIS数据的<strong>展示与交互</strong>。<br>  OpenLayers仅仅是开源GIS框架中的<strong>前端部分</strong>，并不等于是GIS系统，所以很多非GIS专业的前端使用OpenLayers常常会出现很多误区，如社区中每隔几天就有人问的问题：</p><ol><li>请问怎样用ol加载几百万点啊？我现在加载了感觉很卡。</li><li>请问ol能实现路径分析吗？ol能实现缓冲区分析吗？</li></ol><p>提问的人忽略了ol的核心职责是<strong>展示与交互</strong>，实际项目中也不可能有将几千万几百万数据推到前端展示和交互的，一般这种都是后端渲染图刷到前端展示，或者使用矢量切片抽希数据到前端展示，正如普通的web开发中的表单需要分页查询和分页展示是一个道理。至于分析一般是服务端或者空间数据库负责分析，分析结果提交前端展示。业务常常是复杂的，但是每个工具的职责是清晰的，请将复杂的业务交由正确的工具去完成！</p><p><strong>2.OpenLayers的定位</strong></p><p>  GIS前端渲染库除了OpenLayers还有LeafLet和ESRI公司的ArcGIS API，同样能支持地图的前端库还有百度api，高德api，谷歌api等，还有Echarts，D3.js等，初学者常常不能理解他们之间的关系。常常听人说，路径分析我就用高德API不就可以了吗？展示数据我用下Echarts不可以吗？仍然是一句话，选择什么样的工具，完全是依据实际业务需求而定的。当前和地图相关的库大概分类如下：</p><ul><li>在线地图lbs服务：这类库的代表是百度api，高德api，谷歌api，主要特点是：公网环境，开发者需要申请key，key的地图请求服务有次数限制。地图数据和服务都是百度高德提供的，开发者常常是将业务有限的点（几个点，几十个点，几百个点等）定到地图上定个位置。开发中使用它们主要是如招聘网站上公司位置的一个定位，互联网应用中的lbs服务，如各种快递，外卖等app中附近的餐馆影院等。在企业和政府应用中，业务非常复杂，在线地图服务提供的数据不是我们要的，提供的服务不能满足我们的应用，所以实际上基本不会在企业开发中使用。LBS！=GIS。</li><li>数据可视化库：Echarts，D3.js主要作用是web端实现数据可视化的，提供丰富的图表等展示和交互，由于地图的使用越来越普及，所以不可避免的他们也会支持数据在地图上的展示。但主要定位仍然是数据可视化，在开发中，常常指定某个div，用来展示和交互下数据，属于页面的一小部分业务。而一般的综合指挥调度系统的地图是一个应用，加载非常多的图层，可以随时通过地图向地图单元发送指挥命令。page！=application。</li><li>GIS地图库:ol,LeafLet,arcgis api等都属于企业级地图应用开发库，彼此之间大同小异。稍微的差异是arcgis api需要arcserver提供服务，离开了server基本没任何优势。leaflet主要优势还是在开发的第三方控件比较多，但是兼容性比较差。且以“体积小，对移动端友好”为著称，在ol2的年代的确如此，但个人认为API的结构不如ol好，且ol3之后版本支持自定义打包，也支持移动端应用，ol4版本实现es6的import语法，实现按需加载，足以胜任开发大型GIS应用的要求。</li></ul><p>综述：OpenLayers是GIS地图库，定位于开发GIS应用，而非地图页面，用于复杂的展示和交互用户数据。</p><h3 id="二、OpenLayers的特征"><a href="#二、OpenLayers的特征" class="headerlink" title="二、OpenLayers的特征"></a>二、OpenLayers的特征</h3><p><strong>2.1、支持瓦片图层</strong></p><p>  OpenLayers支持从OSM、Bing、MapBox、Stamen和其他任何你能找到的XYZ瓦片资源中提取地图瓦片并在前端展示。同时也支持OGC的WMTS规范的瓦片服务以及ArcGIS规范的瓦片服务。</p><p><strong>2.2、支持矢量切片（或者矢量瓦片）</strong></p><p>  OpenLayers也支持矢量切片的访问和展示，包括MapBox矢量切片中的pbf格式，或者GeoJSON格式和TopoJSON格式的矢量切片。</p><p><strong>2.3、支持矢量图层</strong></p><p>  能够渲染GeoJSON、TopoJSON、KML、GML和其他格式的矢量数据，上面说的矢量切片形式的数据也可以被认为是在矢量图层中渲染。</p><p><strong>2.4、支持OGC规范</strong></p><p>  OpenLayers支持OGC制定的WMS、WFS等GIS网络服务规范。</p><p><strong>2.5、运用前沿技术</strong></p><p>  利用Canvas 2D、WebGL以及HTML5中其他最新的技术来构建功能。同时支持在移动设备上运行。</p><p><strong>2.6、易于定制和扩展</strong></p><p>  可以直接调整CSS来为地图控件设计样式。而且可以对接到不同层级的API进行功能扩展，或者使用第三方库来定制和扩展。</p><p><strong>2.7、面向对象的思想</strong></p><p>  最新版本的OpenLayers采用纯面向对象的ECMA Script 6进行开发，可以说，在OpenLayers中万物皆对象。</p><p><strong>2.8、优秀的交互体验</strong></p><p>  OpenLayers实现了类似于Ajax的无刷新功能，可以结合很多优秀的JavaScript功能插件，带给用户更多丰富的交互体验。</p><h3 id="三、OpenLayers的框架结构"><a href="#三、OpenLayers的框架结构" class="headerlink" title="三、OpenLayers的框架结构"></a>三、OpenLayers的框架结构</h3><p>  OpenLayers遵循面向对象的思想进行设计过程中，实现了各种十分强大的功能，这也意味着它的框架体系也比较庞大。</p><p>  让我们看一幅OpenLayers的框架类图：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190530174435458.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMyMTQ3,size_16,color_FFFFFF,t_70" alt="img"></p><p>  可以看到OpenLayers实现了上百个类，用于对GIS中的各种事物进行抽象表达。</p><p>  其中，Map、Layer、Source和View是OpenLayers框架体系中的核心类，几乎所有的动作都围绕这几个核心类展开，以实现地图加载和相关操作。</p><p>  在OpenLayers的体系框架中：把整个地图看作一个容器（Map），核心为地图图层（Layer），每个图层有对应的数据源（Source），并由地图视图（View）进行地图表现。地图容器上还支持一些与用户交互的控件（Control和Interaction），另外，OpenLayers还支持事件机制。</p><h3 id="四、mapbox-js-和-mapbox-gl-js有什么区别？"><a href="#四、mapbox-js-和-mapbox-gl-js有什么区别？" class="headerlink" title="四、mapbox.js 和 mapbox-gl.js有什么区别？"></a>四、mapbox.js 和 mapbox-gl.js有什么区别？</h3><p>相同点：</p><ul><li>都是由Mapbox公司推出的免费开源的JavaScript库</li><li>都可以作为前端渲染矢量瓦片交互地图的工具</li><li>它们的样式设置都支持Mapbox Style</li></ul><p>不同点：</p><ul><li>mapbox.js是Leaflet的一个插件，使用方式是通过结合Leaflet使用</li><li>mapbox-gl.js 则是使用WebGL技术独立渲染前端库，不需要结合其它渲染引擎（比如Leaflet、OpenLayer）来使用。</li><li>使用mapbox-gl.js的浏览器必须支持WebGL渲染，在旧的浏览器中是不支持mapbox-gl.js的，而mapbox.js则没有此限制</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web GIS </category>
          
          <category> OpenLayer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web GIS </tag>
            
            <tag> OpenLayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue风格指南</title>
      <link href="/2021/01/29/vue%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
      <url>/2021/01/29/vue%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h4 id="1、组件名多单词-完整单词-，每个组件单独分为文件，PascalCase风格命名"><a href="#1、组件名多单词-完整单词-，每个组件单独分为文件，PascalCase风格命名" class="headerlink" title="1、组件名多单词(完整单词)，每个组件单独分为文件，PascalCase风格命名"></a>1、组件名多单词(完整单词)，每个组件单独分为文件，<strong>PascalCase</strong>风格命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;TodoList&gt;</span><br><span class="line"></span><br><span class="line">components&#x2F;  &#x2F;&#x2F;以一般化描述单词开头，以修饰词结尾,方便查找组件</span><br><span class="line">|- TodoList.vue</span><br><span class="line">|- TodoItem.vue</span><br><span class="line">|- SearchButtonClear.vue</span><br><span class="line">|- SearchButtonRun.vue</span><br><span class="line">|- SearchInputQuery.vue</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">单例组件：每个页面只使用一次：+The前缀</span><br><span class="line">紧密耦合的组件：组件只在某个父组件的场景下有意义：+父组件名当前缀</span><br><span class="line">自闭合组件：表示它们不仅没有内容，而且刻意没有内容：&lt;MyComponent&#x2F;&gt;</span><br></pre></td></tr></table></figure><h4 id="2、data值返回函数"><a href="#2、data值返回函数" class="headerlink" title="2、data值返回函数"></a>2、data值返回函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    listTitle: <span class="string">''</span>,</span><br><span class="line">    todos: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、prop-的定义应该尽量详细，至少需要指定其类型，camelCase风格命名"><a href="#3、prop-的定义应该尽量详细，至少需要指定其类型，camelCase风格命名" class="headerlink" title="3、prop 的定义应该尽量详细，至少需要指定其类型，camelCase风格命名"></a>3、prop 的定义应该尽量详细，至少需要指定其类型，<strong>camelCase</strong>风格命名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件在HTML中是xxx-xxx 其他地方定义是xxxXxx</span></span><br><span class="line">props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>, <span class="built_in">Boolean</span>, <span class="built_in">Array</span>, <span class="built_in">Object</span>, <span class="built_in">Function</span>, <span class="built_in">Promise</span>...],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ps：</span><br><span class="line"><span class="number">1</span>、这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值：</span><br><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>、这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</span><br><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、不要把-v-if-和-v-for-同时用在同一个元素上"><a href="#4、不要把-v-if-和-v-for-同时用在同一个元素上" class="headerlink" title="4、不要把 v-if 和 v-for 同时用在同一个元素上"></a>4、不要把 v-if 和 v-for 同时用在同一个元素上</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">为了过滤一个列表中的项目 (比如 v-<span class="keyword">for</span>=<span class="string">"user in users"</span> v-<span class="keyword">if</span>=<span class="string">"user.isActive"</span>)。在这种情形下，请将 users 替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">"user in activeUsers"</span></span><br><span class="line">    :key=<span class="string">"user.id"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  activeUsers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.users.filter(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.isActive</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、为组件样式或实例property设置作用域"><a href="#5、为组件样式或实例property设置作用域" class="headerlink" title="5、为组件样式或实例property设置作用域"></a>5、为组件样式或实例property设置作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"button button-close"</span>&gt;X&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用 <span class="string">`scoped`</span> attribute --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.button &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  border-radius: <span class="number">2</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.button-close &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">你可能会在很多组件里用到数据/</span>实用工具，但是不想污染全局作用域。这种情况下，你可以通过在原型上定义它们使其在每个 Vue 的实例中可用</span><br><span class="line">Vue.prototype.$appName = <span class="string">'My App'</span></span><br><span class="line">这样 $appName 就在所有的 Vue 实例中可用了，甚至在实例被创建之前就可以。如果我们运行：</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$appName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6、组件-实例的选项的顺序"><a href="#6、组件-实例的选项的顺序" class="headerlink" title="6、组件/实例的选项的顺序"></a>6、组件/实例的选项的顺序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">这是我们推荐的组件选项默认顺序。它们被划分为几大类，所以你也能知道从插件里添加的新 property 应该放到哪里。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> **副作用** (触发组件外的影响)</span><br><span class="line">   - <span class="string">`el`</span></span><br><span class="line"><span class="number">2.</span> **全局感知** (要求组件以外的知识)</span><br><span class="line">   - <span class="string">`name`</span></span><br><span class="line">   - <span class="string">`parent`</span></span><br><span class="line"><span class="number">3.</span> **组件类型** (更改组件的类型)</span><br><span class="line">   - <span class="string">`functional`</span></span><br><span class="line"><span class="number">4.</span> **模板修改器** (改变模板的编译方式)</span><br><span class="line">   - <span class="string">`delimiters`</span></span><br><span class="line">   - <span class="string">`comments`</span></span><br><span class="line"><span class="number">5.</span> **模板依赖** (模板内使用的资源)</span><br><span class="line">   - <span class="string">`components`</span></span><br><span class="line">   - <span class="string">`directives`</span></span><br><span class="line">   - <span class="string">`filters`</span></span><br><span class="line"><span class="number">6.</span> **组合** (向选项里合并 property)</span><br><span class="line">   - <span class="string">`extends`</span></span><br><span class="line">   - <span class="string">`mixins`</span></span><br><span class="line"><span class="number">7.</span> **接口** (组件的接口)</span><br><span class="line">   - <span class="string">`inheritAttrs`</span></span><br><span class="line">   - <span class="string">`model`</span></span><br><span class="line">   - <span class="string">`props`</span>/<span class="string">`propsData`</span></span><br><span class="line"><span class="number">8.</span> **本地状态** (本地的响应式 property)</span><br><span class="line">   - <span class="string">`data`</span></span><br><span class="line">   - <span class="string">`computed`</span></span><br><span class="line"><span class="number">9.</span> **事件** (通过响应式事件触发的回调)</span><br><span class="line">   - <span class="string">`watch`</span></span><br><span class="line">   - 生命周期钩子 (按照它们被调用的顺序)</span><br><span class="line">     - <span class="string">`beforeCreate`</span></span><br><span class="line">     - <span class="string">`created`</span></span><br><span class="line">     - <span class="string">`beforeMount`</span></span><br><span class="line">     - <span class="string">`mounted`</span></span><br><span class="line">     - <span class="string">`beforeUpdate`</span></span><br><span class="line">     - <span class="string">`updated`</span></span><br><span class="line">     - <span class="string">`activated`</span></span><br><span class="line">     - <span class="string">`deactivated`</span></span><br><span class="line">     - <span class="string">`beforeDestroy`</span></span><br><span class="line">     - <span class="string">`destroyed`</span></span><br><span class="line"><span class="number">10.</span> **非响应式的 property** (不依赖响应系统的实例 property)</span><br><span class="line">    - <span class="string">`methods`</span></span><br><span class="line"><span class="number">11.</span> **渲染** (组件输出的声明式描述)</span><br><span class="line">    - <span class="string">`template`</span>/<span class="string">`render`</span></span><br><span class="line">    - <span class="string">`renderError`</span></span><br></pre></td></tr></table></figure><h4 id="7、元素-attribute-的顺序"><a href="#7、元素-attribute-的顺序" class="headerlink" title="7、元素 attribute 的顺序"></a>7、元素 attribute 的顺序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">这是我们为组件选项推荐的默认顺序。它们被划分为几大类，所以你也能知道新添加的自定义 attribute 和指令应该放到哪里。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> **定义** (提供组件的选项)</span><br><span class="line">   - <span class="string">`is`</span></span><br><span class="line"><span class="number">2.</span> **列表渲染** (创建多个变化的相同元素)</span><br><span class="line">   - <span class="string">`v-for`</span></span><br><span class="line"><span class="number">3.</span> **条件渲染** (元素是否渲染/显示)</span><br><span class="line">   - <span class="string">`v-if`</span></span><br><span class="line">   - <span class="string">`v-else-if`</span></span><br><span class="line">   - <span class="string">`v-else`</span></span><br><span class="line">   - <span class="string">`v-show`</span></span><br><span class="line">   - <span class="string">`v-cloak`</span></span><br><span class="line"><span class="number">4.</span> **渲染方式** (改变元素的渲染方式)</span><br><span class="line">   - <span class="string">`v-pre`</span></span><br><span class="line">   - <span class="string">`v-once`</span></span><br><span class="line"><span class="number">5.</span> **全局感知** (需要超越组件的知识)</span><br><span class="line">   - <span class="string">`id`</span></span><br><span class="line"><span class="number">6.</span> **唯一的 attribute** (需要唯一值的 attribute)</span><br><span class="line">   - <span class="string">`ref`</span></span><br><span class="line">   - <span class="string">`key`</span></span><br><span class="line"><span class="number">7.</span> **双向绑定** (把绑定和事件结合起来)</span><br><span class="line">   - <span class="string">`v-model`</span></span><br><span class="line"><span class="number">8.</span> **其它 attribute** (所有普通的绑定或未绑定的 attribute)</span><br><span class="line"><span class="number">9.</span> **事件** (组件事件监听器)</span><br><span class="line">   - <span class="string">`v-on`</span></span><br><span class="line"><span class="number">10.</span> **内容** (覆写元素的内容)</span><br><span class="line">    - <span class="string">`v-html`</span></span><br><span class="line">    - <span class="string">`v-text`</span></span><br></pre></td></tr></table></figure><h4 id="8、一组-v-if-v-else-的元素类型相同，最好使用-key-比如两个-div-元素-。"><a href="#8、一组-v-if-v-else-的元素类型相同，最好使用-key-比如两个-div-元素-。" class="headerlink" title="8、一组 v-if + v-else 的元素类型相同，最好使用 key (比如两个 div 元素)。"></a>8、一组 v-if + v-else 的元素类型相同，最好使用 key (比如两个 div 元素)。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  v-<span class="keyword">if</span>=<span class="string">"error"</span></span><br><span class="line">  key=<span class="string">"search-status"</span></span><br><span class="line">&gt;</span><br><span class="line">  错误：&#123;&#123; error &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div</span></span><br><span class="line"><span class="regexp">  v-else</span></span><br><span class="line"><span class="regexp">  key="search-results"</span></span><br><span class="line"><span class="regexp">&gt;</span></span><br><span class="line"><span class="regexp">  &#123;&#123; results &#125;&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h4 id="9、元素选择器应该避免在-scoped-中出现。"><a href="#9、元素选择器应该避免在-scoped-中出现。" class="headerlink" title="9、元素选择器应该避免在 scoped 中出现。"></a>9、元素选择器应该避免在 scoped 中出现。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在 scoped 样式中，类选择器比元素选择器更好，因为大量使用元素选择器是很慢的。</span><br><span class="line"></span><br><span class="line">标识选择器：id</span><br><span class="line">类选择器：<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">元素(属性)选择器：<span class="title">div</span> <span class="title">p</span> <span class="title">button</span>...</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
          <category> 风格指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记2</title>
      <link href="/2021/01/01/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2021/01/01/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、vue目录结构中public与assets的区别"><a href="#一、vue目录结构中public与assets的区别" class="headerlink" title="一、vue目录结构中public与assets的区别"></a>一、vue目录结构中public与assets的区别</h3><p>1.相同点<br>文件夹中的资源在html中使用都是可以的。</p><p>2.不同点</p><p>①public中的文件，是不会经过编译的，不会被webpack处理的，它们会被直接复制到最终的打包目录下面，且必须使用绝对路径来引用这些文件。打包后会生成dist文件夹，public中的文件只是复制一遍。因此，public建议放一些外部第三方，自己的文件放在assets，别人的放public中。<br>②使用assets下面的资源，在js中使用的话，路径要经过webpack中的file-loader编译，路径不能直接写。在动态绑定中，assets路径的图片会加载失败（因为webpack使用的是commenJS规范，必须使用require才可以）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDemo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/logo.png"</span> <span class="attr">title</span>=<span class="string">"public/static中的图片"</span>&gt;</span>//绝对路径访问</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/logo.png"</span> <span class="attr">title</span>=<span class="string">"assets中的图片"</span>&gt;</span>//相对路径访问</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"sticUrl"</span> <span class="attr">title</span>=<span class="string">"public/static中的图片"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"asetUrl"</span> <span class="attr">title</span>=<span class="string">"assets中的图片"</span>&gt;</span>//动态绑定，必须require</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: 'myDemo',</span><br><span class="line">    data ()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        asetUrl: require('../assets/logo.png'),</span><br><span class="line">        sticUrl: '/static/logo.png'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、-sync-修饰符"><a href="#二、-sync-修饰符" class="headerlink" title="二、.sync 修饰符"></a>二、<code>.sync</code> 修饰符</h3><blockquote><p>2.3.0+ 新增</p></blockquote><p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件都没有明显的变更来源。</p><p>这也是为什么我们推荐以 <code>update:myPropName</code> 的模式触发事件取而代之。举个例子，在一个包含 <code>title</code> prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&#39;update:title&#39;, newTitle)</span><br></pre></td></tr></table></figure><p>然后父组件可以监听那个事件并根据需要更新一个本地的数据 property。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title&#x3D;&quot;doc.title&quot;</span><br><span class="line">  v-on:update:title&#x3D;&quot;doc.title &#x3D; $event&quot;</span><br><span class="line">&gt;&lt;&#x2F;text-document&gt;</span><br></pre></td></tr></table></figure><p>为了方便起见，我们为这种模式提供一个缩写，即 <code>.sync</code> 修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document v-bind:title.sync&#x3D;&quot;doc.title&quot;&gt;&lt;&#x2F;text-document&gt;</span><br><span class="line"></span><br><span class="line">在el中</span><br><span class="line"> &lt;el-dialog title&#x3D;&quot;统计字段配置&quot; :visible.sync&#x3D;&quot;dialogEditVisible&quot; &gt;</span><br><span class="line"> &lt;&#x2F;el-dialog&gt;</span><br></pre></td></tr></table></figure><p>注意带有 <code>.sync</code> 修饰符的 <code>v-bind</code> <strong>不能</strong>和表达式一起使用 (例如 <code>v-bind:title.sync=”doc.title + ‘!’”</code> 是无效的)。取而代之的是，你只能提供你想要绑定的 property 名，类似 <code>v-model</code>。</p><p>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 <code>.sync</code> 修饰符和 <code>v-bind</code> 配合使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document v-bind.sync&#x3D;&quot;doc&quot;&gt;&lt;&#x2F;text-document&gt;</span><br></pre></td></tr></table></figure><p>这样会把 <code>doc</code> 对象中的每一个 property (如 <code>title</code>) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 <code>v-on</code> 监听器。</p><p>将 <code>v-bind.sync</code> 用在一个字面量的对象上，例如 <code>v-bind.sync=”{ title: doc.title }”</code>，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。</p><h3 id="三、v-model"><a href="#三、v-model" class="headerlink" title="三、v-model"></a>三、v-model</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、v-model在input元素上时</span><br><span class="line">v-model虽然很像使用了双向数据绑定的 Angular 的 ng-model，但是 Vue 是单项数据流，v-model 只是语法糖而已。</span><br><span class="line">第一行的代码其实只是第二行的语法糖。</span><br><span class="line">&lt;input v-model=<span class="string">"sth"</span> /&gt;</span><br><span class="line">&lt;input v-bind:value=<span class="string">"sth"</span> v-on:input=<span class="string">"sth = $event.target.value"</span> /&gt;</span><br><span class="line">然后第二行代码还能简写成这样：</span><br><span class="line">&lt;input :value=<span class="string">"sth"</span> @input=<span class="string">"sth = $event.target.value"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、在创建类似复选框或者单选框的常见组件时，v-model就不好用了</span><br><span class="line">v-model 给我们提供好了 value 属性和 oninput 事件，但是，我们需要的不是 value 属性，而是 checked 属性，并且当你点击这个单选框的时候不会触发 oninput 事件，它只会触发 onchange 事件。这就尴尬了，因为 v-model 只是用到了 input 元素上，所以这种情况好解决：</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> :checked=<span class="string">"status"</span> @change=<span class="string">"status = $event.target.checked"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="四、trigger-‘change’和trigger-‘blur’"><a href="#四、trigger-‘change’和trigger-‘blur’" class="headerlink" title="四、trigger: ‘change’和trigger: ‘blur’"></a>四、trigger: ‘change’和trigger: ‘blur’</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:rules=<span class="string">"[</span></span><br><span class="line"><span class="string">&#123; required: true, message: '请输入邮箱地址', trigger: 'blur' &#125;, //失去焦点后显示表单规则验证</span></span><br><span class="line"><span class="string">]"</span></span><br><span class="line">                                </span><br><span class="line">:rules=<span class="string">"[</span></span><br><span class="line"><span class="string">   &#123; required: true, message: '请输入邮箱地址', trigger: 'change' &#125;, //改变后显示表单规则验证(推荐)</span></span><br><span class="line"><span class="string">]"</span></span><br></pre></td></tr></table></figure><h3 id="五、表单验证"><a href="#五、表单验证" class="headerlink" title="五、表单验证"></a>五、表单验证</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、form 加上 rules，model属性绑定，ref标识  （rule可写在form-item）</span><br><span class="line"><span class="number">2</span>、form-item 加上prop</span><br><span class="line"></span><br><span class="line">&lt;el-form :model=<span class="string">"editForm"</span> ref=<span class="string">"editForm"</span> &gt;  </span><br><span class="line">     &lt;el-form-item</span><br><span class="line">label=<span class="string">"统计名称"</span></span><br><span class="line">label-width=<span class="string">"120px"</span></span><br><span class="line">prop=<span class="string">"statical_name"</span></span><br><span class="line">:rules=<span class="string">"[</span></span><br><span class="line"><span class="string">&#123; required: true, message: '请输入邮箱地址', trigger: 'change' &#125;,</span></span><br><span class="line"><span class="string">    ]"</span></span><br><span class="line">&gt;</span><br><span class="line">        &lt;el-input placeholder=<span class="string">"请输入字段"</span> v-model=<span class="string">"editForm.statical_name"</span> autocomplete=<span class="string">"off"</span> style=<span class="string">"width:50%; "</span>&gt;&lt;<span class="regexp">/el-input&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-form-item&gt;</span><br><span class="line"></span><br><span class="line">handleEditOK(editForm) &#123;  <span class="comment">//提交</span></span><br><span class="line"><span class="keyword">this</span>.$refs[editForm].validate(<span class="function"><span class="params">valid</span> =&gt;</span>&#123; <span class="comment">//表单验证</span></span><br><span class="line"><span class="keyword">if</span>(valid) &#123;</span><br><span class="line"><span class="keyword">this</span>.dialogEditVisible = <span class="literal">false</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">handleEditReset() &#123;</span><br><span class="line"><span class="keyword">this</span>.$refs[editForm].resetFields(); <span class="comment">//重置（重置为初始值）</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记</title>
      <link href="/2020/12/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/12/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="vue中template的三种写法"><a href="#vue中template的三种写法" class="headerlink" title="vue中template的三种写法"></a>vue中template的三种写法</h1><p>第一种(字符串模板写法):直接写在vue构造器里,这种写法比较直观,适用于html代码不多的场景,但是如果模板里html代码太多,不便于维护,不建议这么写.<br><img src= "/img/loading.gif" data-src="/2020/12/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1" alt="在这里插入图片描述"><br>第二种:直接写在template标签里,这种写法跟写html很像.<br><img src= "/img/loading.gif" data-src="/2020/12/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2" alt="在这里插入图片描述"></p><p>第三种:写在script标签里,这种写法官方推荐,vue官方推荐script中type属性加上”x-template”,即:<br><img src= "/img/loading.gif" data-src="/2020/12/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3" alt="在这里插入图片描述"></p><h1 id="vue定义data的三种方式与区别"><a href="#vue定义data的三种方式与区别" class="headerlink" title="vue定义data的三种方式与区别"></a>vue定义data的三种方式与区别</h1><p>在vue中，定义data可以有三种写法。</p><p>1.第一种写法，对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">　　el: &#39;#yanggb&#39;,</span><br><span class="line">　　data: &#123;</span><br><span class="line">　　　　yanggb: &#39;yanggb&#39;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.第二种写法，函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">　　el: &#39;#yanggb&#39;,</span><br><span class="line">　　data: function() &#123;</span><br><span class="line">　　　　return &#123;</span><br><span class="line">　　　　　　yanggb: &#39;yanggb&#39;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.第三种写法，函数，是第二种写法的ES6写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">　　el: &#39;#yanggb&#39;,</span><br><span class="line">　　data() &#123;</span><br><span class="line">　　　　return &#123;</span><br><span class="line">　　　　　　yanggb: &#39;yanggb&#39;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="两种创建vue实例的区别"><a href="#两种创建vue实例的区别" class="headerlink" title="两种创建vue实例的区别"></a>两种创建vue实例的区别</h1><p><strong>第一个例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: <span class="string">'Hello Vue'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    app.msg=<span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(app) ;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二个例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: <span class="string">'Hello Vue'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    app.msg=<span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(app) ;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="这两个例子在页面渲染上是没有差别的-但是在控制台输出的console-log-app-是有差别的"><a href="#这两个例子在页面渲染上是没有差别的-但是在控制台输出的console-log-app-是有差别的" class="headerlink" title="这两个例子在页面渲染上是没有差别的,但是在控制台输出的console.log(app)是有差别的"></a>这两个例子在页面渲染上是没有差别的,但是在控制台输出的console.log(app)是有差别的</h5><p>第一个是一个vue实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue &#123;_uid: 0, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: Vue, …&#125;</span><br></pre></td></tr></table></figure><p>第二个仅仅是一个DOM对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&#39;&gt;Hello Vue&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>如果dom元素的id没有和js内置对象重名，或者没有被重写，那么这个id的“变量”是指向这个dom元素的。即：不对app进行重新赋值，则app指向dom元素。由于第一种方法对app重新赋值，所以app指向了Vue对象。</p><p>另外，<img name="app">这样的也会有类似的效果</p>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS之Promise</title>
      <link href="/2020/10/29/JS%E4%B9%8BPromise/"/>
      <url>/2020/10/29/JS%E4%B9%8BPromise/</url>
      
        <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理且更强大。它最早由社区提出并实现，ES6将其写进了语言标准，统一了用法，并原生提供了Promise对象。</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>对象的状态不受外界影响 （3种状态）<ul><li>Pending状态（进行中）</li><li>Fulfilled状态（已成功）</li><li>Rejected状态（已失败）</li></ul></li><li>一旦状态改变就不会再变 （两种状态改变：成功或失败）<ul><li>Pending -&gt; Fulfilled</li><li>Pending -&gt; Rejected</li></ul></li></ol><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="创建Promise实例"><a href="#创建Promise实例" class="headerlink" title="创建Promise实例"></a>创建Promise实例</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ... some code 。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由JavaScript引擎提供，不用自己部署。<br>  resolve作用是将Promise对象状态由“未完成”变为“成功”，也就是<code>Pending -&gt; Fulfilled</code>，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；而reject函数则是将Promise对象状态由“未完成”变为“失败”，也就是<code>Pending -&gt; Rejected</code>，在异步操作失败时调用，并将异步操作的结果作为参数传递出去。</p><h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>  Promise实例生成后，可用<code>then</code>方法分别指定两种状态回调参数。then 方法可以接受两个回调函数作为参数：</p><ol><li>Promise对象状态改为Resolved时调用 （必选）</li><li>Promise对象状态改为Rejected时调用 （可选）</li></ol><h4 id="基本用法示例"><a href="#基本用法示例" class="headerlink" title="基本用法示例"></a>基本用法示例</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">500</span>).then( <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">"finished"</span>));</span><br></pre></td></tr></table></figure><p>  这段代码定义了一个函数sleep，调用后，等待了指定参数(500)毫秒后执行then中的函数。值得注意的是，Promise新建后就会立即执行。</p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>  接下来我们探究一下它的执行顺序，看以下代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"AAA"</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"BBB"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"CCC"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AAA</span></span><br><span class="line"><span class="comment">// CCC</span></span><br><span class="line"><span class="comment">// BBB</span></span><br></pre></td></tr></table></figure><p>  执行后，我们发现输出顺序总是 <code>AAA -&gt; CCC -&gt; BBB</code>。表明，在Promise新建后会立即执行，所以<code>首先输出 AAA</code>。然后，then方法指定的回调函数将在当前脚本所有同步任务执行完后才会执行，所以<code>BBB 最后输出</code>。</p><h4 id="与定时器混用"><a href="#与定时器混用" class="headerlink" title="与定时器混用"></a>与定时器混用</h4><p>  首先看一个实例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">"2"</span>), <span class="number">0</span>);</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"3"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>  可以看到，结果输出顺序总是：<code>1 -&gt; 4 -&gt; 3 -&gt; 2</code>。1与4的顺序不必再说，而2与3先输出Promise的then，而后输出定时器任务。原因则是Promise属于JavaScript引擎内部任务，而setTimeout则是浏览器API，而引擎内部任务优先级高于浏览器API任务，所以有此结果。</p><h3 id="拓展-async-await"><a href="#拓展-async-await" class="headerlink" title="拓展 async/await"></a>拓展 async/await</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>  顾名思义，异步。async函数对 Generator 函数的改进，async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。特点体现在以下四点：</p><ul><li>内置执行器</li><li>更好的语义</li><li>更广的适用性</li><li>返回值是 Promise</li></ul><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p>  顾名思义，等待。正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。另一种情况是，await命令后面是一个thenable对象（即定义then方法的对象），那么await会将其等同于 Promise 对象。</p><h4 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h4><p>  先看示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve,ms);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"AAA"</span>)</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">5000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"BBB"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// AAA</span></span><br><span class="line"><span class="comment">// BBB (5000ms后)</span></span><br></pre></td></tr></table></figure><p>  我们定义函数sleep，返回一个Promise。然后在handle函数前加上async关键词，这样就定义了一个async函数。在该函数中，利用await来等待一个Promise。</p><h3 id="Promise优缺点"><a href="#Promise优缺点" class="headerlink" title="Promise优缺点"></a>Promise优缺点</h3><table><thead><tr><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">解决回调</td><td align="center">无法监测进行状态</td></tr><tr><td align="center">链式调用</td><td align="center">新建立即执行且无法取消</td></tr><tr><td align="center">减少嵌套</td><td align="center">内部错误无法抛出</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd富文本</title>
      <link href="/2020/09/27/antd%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
      <url>/2020/09/27/antd%E5%AF%8C%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>富文本：</p><p>ps：(图片+中文bug未解决)</p><p>1、安装</p><p><code>cnpm install react-draft-wysiwyg --save cnpm install draft-js --savecnpm install draftjs-to-html  --save cnpm install html-to-draftjs  --save</code></p><p>2、引用</p><p><code>import {convertToRaw,EditorState,ContentState } from &#39;draft-js&#39;import {Editor} from &#39;react-draft-wysiwyg&#39;import draftToHtml from &#39;draftjs-to-html&#39; //获取编辑器html内容import htmlToDraft from &#39;html-to-draftjs&#39; //将html内容转为编辑器显示内容//引入样式import &#39;react-draft-wysiwyg/dist/react-draft-wysiwyg.css&#39;</code></p><p>3、采用父子组件使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父</span></span><br><span class="line"><span class="keyword">import</span> DraftEditor <span class="keyword">from</span> <span class="string">'./components/DraftEditor'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;PageHeaderWrapper&gt;</span><br><span class="line">        &lt;Card&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            !<span class="keyword">this</span>.state.visible?</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;Row&gt;</span><br><span class="line">                  &lt;Col span=&#123;<span class="number">7</span>&#125;&gt;&lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;Col span=&#123;11&#125;&gt;&lt;/</span>Col&gt;</span><br><span class="line">                  &lt;Col span=&#123;<span class="number">3</span>&#125;&gt;</span><br><span class="line">                    &lt;Upload &#123;...props&#125; fileList=&#123;<span class="keyword">this</span>.state.fileList&#125; onChange=&#123;(value)=&gt;&#123;<span class="keyword">this</span>.uploadChange(value)&#125;&#125;&gt;</span><br><span class="line">                      &lt;Button type=&#123;<span class="string">'primary'</span>&#125; icon=&#123;&lt;UploadOutlined /&gt;&#125; disabled=&#123;<span class="keyword">this</span>.state.fileList.length===<span class="number">0</span>?<span class="literal">false</span>:<span class="literal">true</span>&#125;&gt;上传HTML文件&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>Upload&gt;</span><br><span class="line">                  &lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;Button type=&#123;'primary'&#125; onClick=&#123;()=&gt;&#123;this.setState(&#123;visible:1&#125;)&#125;&#125;&gt;更改回收指南&lt;/</span>Button&gt;</span><br><span class="line">                &lt;<span class="regexp">/Row&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Card style=&#123;&#123;textAlign:'center'&#125;&#125; bordered=&#123;false&#125;&gt;</span></span><br><span class="line"><span class="regexp">                  &#123;/</span>*<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"example"</span> <span class="attr">src</span>=<span class="string">&#123;AD&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span>'<span class="attr">600px</span>'&#125;&#125;/&gt;</span></span>*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                  &lt;div id="result" style=&#123;&#123;width:'600px',margin:'auto'&#125;&#125;&gt;&lt;/</span>div&gt;</span><br><span class="line">                &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">              :</span><br><span class="line">              &lt;DraftEditor  parent=&#123;<span class="keyword">this</span>&#125;/&gt; <span class="comment">//父组件传值</span></span><br><span class="line">          &#125;</span><br><span class="line">        &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>PageHeaderWrapper&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  uploadHTML=<span class="function">(<span class="params">editorContent</span>)=&gt;</span>&#123; <span class="comment">//子组件传来html字符串，以file形式存储，上传到服务器</span></span><br><span class="line">    <span class="keyword">let</span> file = <span class="keyword">new</span> Blob([editorContent]);</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">'configId'</span>,<span class="number">1</span>);</span><br><span class="line">    formData.append(<span class="string">'files'</span>,file);</span><br><span class="line">    fetch(rootPath+<span class="string">'/api/guide/uploadRecyclGuide'</span>,&#123;</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      body: formData,</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">json</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(json.status===<span class="number">200</span>) &#123;</span><br><span class="line">        message.success(<span class="string">'更改成功！'</span>)</span><br><span class="line">        <span class="keyword">this</span>.getRecyclGuide();</span><br><span class="line">        <span class="keyword">this</span>.setVisible();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        message.error(<span class="string">'更改失败！'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    message.info(<span class="string">'正在上传，请稍等！'</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Card, Button, Modal, message&#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="comment">//引入相关组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;convertToRaw,EditorState,ContentState &#125; <span class="keyword">from</span> <span class="string">'draft-js'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Editor&#125; <span class="keyword">from</span> <span class="string">'react-draft-wysiwyg'</span></span><br><span class="line"><span class="keyword">import</span> draftToHtml <span class="keyword">from</span> <span class="string">'draftjs-to-html'</span> <span class="comment">//获取编辑器html内容</span></span><br><span class="line"><span class="keyword">import</span> htmlToDraft <span class="keyword">from</span> <span class="string">'html-to-draftjs'</span> <span class="comment">//将html内容转为编辑器显示内容</span></span><br><span class="line"><span class="comment">//引入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123;rootPath&#125; <span class="keyword">from</span> <span class="string">"@/services/config/config"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DraftEditor</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      <span class="comment">// editorState:  EditorState.createEmpty(),//创建一个空得富文本</span></span><br><span class="line">      editorState: <span class="string">''</span>,<span class="comment">//创建一个空得富文本</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  componentDidMount=<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contentBlock = htmlToDraft(<span class="keyword">this</span>.props.parent.state.html);</span><br><span class="line">    <span class="keyword">const</span> contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);</span><br><span class="line">    <span class="keyword">const</span> editorState = EditorState.createWithContent(contentState);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;editorState&#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//编辑器发上内容发生变化时</span></span><br><span class="line">  onEditorStateChange = <span class="function">(<span class="params">editorState</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(convertToRaw(editorState.getCurrentContent()))</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      editorState</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取内容变化值(暂时不用)</span></span><br><span class="line">  onEditorChange = <span class="function">(<span class="params">editorContent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(JSON.stringify(editorContent));</span></span><br><span class="line">    <span class="comment">// console.log(editorContent);</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      editorContent</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//清空编辑器内容</span></span><br><span class="line">  handleClearContent = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      editorState: <span class="string">''</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//以富文本的方式保存，即以HTML格式的方式保存发送到后台</span></span><br><span class="line">  saveAsHtml=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> editorContent = draftToHtml(convertToRaw(<span class="keyword">this</span>.state.editorState.getCurrentContent()))</span><br><span class="line">    editorContent = <span class="string">'&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;'</span> + editorContent + <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line">    <span class="comment">// console.log(editorContent)</span></span><br><span class="line">    <span class="keyword">this</span>.props.parent.uploadHTML(editorContent)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  uploadImageCallBack = <span class="function"><span class="params">file</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">    (resolve, reject) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">      reader.readAsDataURL(file);</span><br><span class="line">      <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">      <span class="comment">// let url = ''</span></span><br><span class="line">      reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        img.src = <span class="keyword">this</span>.result</span><br><span class="line">        resolve(&#123;</span><br><span class="line">          data: &#123;</span><br><span class="line">            link: img.src</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; editorState, editorContent&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Card&gt;</span><br><span class="line">          &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.handleClearContent&#125;&gt;清空内容&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">          &#123;/</span>*<span class="xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleGetHtml&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;marginLeft:20&#125;&#125;</span>&gt;</span>获取HTML文本<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">          &#123;/</span>*<span class="xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleGetJson&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;marginLeft:20&#125;&#125;</span>&gt;</span>获取JSON文本<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">          &lt;Button type="primary" onClick=&#123;this.saveAsHtml&#125; style=&#123;&#123;marginLeft:20&#125;&#125;&gt;保存&lt;/</span>Button&gt;</span><br><span class="line">          &lt;Button type=<span class="string">"primary"</span> onClick=&#123;()=&gt;&#123;<span class="keyword">this</span>.props.parent.getRecyclGuide();<span class="keyword">this</span>.props.parent.setVisible();&#125;&#125; style=&#123;&#123;<span class="attr">marginLeft</span>:<span class="number">20</span>&#125;&#125;&gt;取消&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Card&gt;</span><br><span class="line">        &lt;Card title=<span class="string">"富文本编辑器"</span>&gt;</span><br><span class="line">          &lt;Editor</span><br><span class="line">            editorState=&#123;editorState&#125;</span><br><span class="line">            onContentStateChange=&#123;<span class="keyword">this</span>.onEditorChange&#125; <span class="comment">//获取内容变化值</span></span><br><span class="line">            onEditorStateChange=&#123;<span class="keyword">this</span>.onEditorStateChange&#125;  <span class="comment">//编辑器状态发生变化时</span></span><br><span class="line">            localization=&#123;&#123; <span class="attr">locale</span>: <span class="string">'zh'</span> &#125;&#125;</span><br><span class="line">            toolbar=&#123;&#123;</span><br><span class="line">              image: &#123;</span><br><span class="line">                uploadEnabled: <span class="literal">true</span>,</span><br><span class="line">                alignmentEnabled: <span class="literal">true</span>,</span><br><span class="line">                uploadCallback: <span class="keyword">this</span>.uploadImageCallBack,</span><br><span class="line">                previewImage: <span class="literal">true</span>,</span><br><span class="line">                inputAccept: <span class="string">'image/*'</span>,</span><br><span class="line">                alt: &#123;<span class="attr">present</span>: <span class="literal">false</span>, <span class="attr">mandatory</span>: <span class="literal">false</span>&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Ant Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Ant Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd相关记录</title>
      <link href="/2020/08/27/antd%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/08/27/antd%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1、antd-Pro项目创建"><a href="#1、antd-Pro项目创建" class="headerlink" title="1、antd-Pro项目创建"></a>1、antd-Pro项目创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir &lt;your-project-name&gt;</span><br><span class="line">$ cd &lt;your-project-name&gt;</span><br><span class="line">$ yarn create umi  # or npm create umi</span><br><span class="line">---------------------</span><br><span class="line">推荐或者</span><br><span class="line">1、创建文件夹，用ide打开</span><br><span class="line">2、cnpm create umi</span><br><span class="line"></span><br><span class="line"># Choose ant-design-pro:</span><br><span class="line"> Select the boilerplate type (Use arrow keys)</span><br><span class="line">❯ ant-design-pro  - Create project with an layout-only ant-design-pro boilerplate, use together with umi block.</span><br><span class="line">  app             - Create project with a simple boilerplate, support typescript.</span><br><span class="line">  block           - Create a umi block.</span><br><span class="line">  library         - Create a library with umi.</span><br><span class="line">  plugin          - Create a umi plugin.</span><br><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">$ npm install</span><br><span class="line">$ npm start         # visit http:&#x2F;&#x2F;localhost:8000</span><br></pre></td></tr></table></figure><h3 id="2、在-React-Vue-Angular-中使用-G2"><a href="#2、在-React-Vue-Angular-中使用-G2" class="headerlink" title="2、在 React / Vue / Angular 中使用 G2"></a>2、在 React / Vue / Angular 中使用 G2</h3><p>基于 AntV 技术栈还有许多优秀的项目，在 React 环境下使用 G2，我们推荐使用 BizCharts 和 Viser-react！这两个产品都是基于 G2 的 React 版本封装，使用体验更符合 React 技术栈的习惯，他们都与 AntV 有着紧密的协同，他们很快也将同步开源和发布基于 G2 4.0 的版本。</p><ul><li>BizCharts 地址：<a href="https://bizcharts.net/" target="_blank" rel="noopener">https://bizcharts.net</a></li><li>Viser 地址：<a href="https://viserjs.github.io/" target="_blank" rel="noopener">https://viserjs.github.io/</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> onSelect = <span class="function">(<span class="params">val, option</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> initData = <span class="keyword">this</span>.state.getByServerData;</span><br><span class="line">  <span class="keyword">const</span> fitList = initData.filter(<span class="function"><span class="params">r</span> =&gt;</span> r.ipAddress === option.props.text);</span><br><span class="line"><span class="keyword">const</span> dataSource = &#123; <span class="attr">items</span>: fitList, <span class="attr">totalCount</span>: fitList.length &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; items, totalCount &#125; = dataSource;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">pageIndex</span>: <span class="number">1</span>, items, totalCount, <span class="attr">listloading</span>: <span class="literal">false</span>, <span class="attr">isSeach</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   handleSearch = <span class="function"><span class="params">value</span> =&gt;</span> value ? <span class="keyword">this</span>.tabGetList(<span class="number">0</span>, <span class="number">10</span>, value) : <span class="keyword">this</span>.tabGetList(<span class="number">0</span>, <span class="number">10</span>, <span class="literal">null</span>) &amp;&amp; <span class="keyword">this</span>.setState(&#123; <span class="attr">isSeach</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  renderOption = <span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">Option</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">text</span>=<span class="string">&#123;item.ipAddress&#125;</span>&gt;</span></span></span><br><span class="line">    &lt;div className="global-search-item"&gt;</span><br><span class="line">    &lt;span className="global-search-item-desc"&gt;&#123;item.ipAddress&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span className="global-search-item-count"&gt;&#123;item.manager.split('&amp;')[0]&#125; &lt;/span&gt;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"> render() &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; data, total, current, getByServerData, isSeach &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> seachResults = getByServerData.length &gt; <span class="number">0</span> ? getByServerData.map(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.renderOption(r);</span><br><span class="line">   &#125;) : [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;Row gutter=&#123;<span class="number">16</span>&#125; className=&#123;cls.searchRow&#125;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Search placeholder=<span class="string">'输入查询条件进行搜索'</span></span><br><span class="line">        seachResults=&#123;seachResults&#125;</span><br><span class="line">        onSelect=&#123;<span class="keyword">this</span>.onSelect&#125;</span><br><span class="line">        handleSearch=&#123;<span class="keyword">this</span>.handleSearch&#125;</span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/Row&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、react下载和跳转链接"><a href="#3、react下载和跳转链接" class="headerlink" title="3、react下载和跳转链接"></a>3、react下载和跳转链接</h3><h3 id="4、form表单提交"><a href="#4、form表单提交" class="headerlink" title="4、form表单提交"></a>4、form表单提交</h3><h3 id="5、·树treenode"><a href="#5、·树treenode" class="headerlink" title="5、·树treenode"></a>5、·树treenode</h3><h3 id="6、禁用disabled"><a href="#6、禁用disabled" class="headerlink" title="6、禁用disabled"></a>6、禁用disabled</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&#123;&#123;pointerEvents:&#39;none&#39;&#125;&#125; &gt;</span><br><span class="line">  &lt;Space size&#x3D;&quot;middle&quot;&gt;</span><br><span class="line">    &lt;Checkbox.Group  options&#x3D;&#123;this.state.Options&#125; defaultValue&#x3D;&#123;text&#125;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Space&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>同一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style&#x3D;&#123;&#123;verticalAlign:&#39;middle&#39;, marginTop:&#39;0&#39;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="7、格式化-n-t"><a href="#7、格式化-n-t" class="headerlink" title="7、格式化\n\t"></a>7、格式化\n\t</h3><p><code>&lt;pre&gt;&lt;/pre&gt;</code></p><h3 id="8、时间戳转Data转字符串"><a href="#8、时间戳转Data转字符串" class="headerlink" title="8、时间戳转Data转字符串"></a>8、时间戳转Data转字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringTime&#x3D;moment(new Date(时间戳)).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);</span><br></pre></td></tr></table></figure><h3 id="9、字符串转Data"><a href="#9、字符串转Data" class="headerlink" title="9、字符串转Data"></a>9、字符串转Data</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment(StringTime, &quot;HH:mm:ss&quot;),</span><br></pre></td></tr></table></figure><h3 id="10、Data-moment"><a href="#10、Data-moment" class="headerlink" title="10、Data moment"></a>10、Data moment</h3><h5 id="①Data转时间戳"><a href="#①Data转时间戳" class="headerlink" title="①Data转时间戳"></a>①Data转时间戳</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment().valueOf()</span><br></pre></td></tr></table></figure><h5 id="②获取当前时间"><a href="#②获取当前时间" class="headerlink" title="②获取当前时间"></a>②获取当前时间</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(moment().locale(<span class="string">'zh-cn'</span>).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>))</span><br></pre></td></tr></table></figure><h5 id="③获取当前时间戳"><a href="#③获取当前时间戳" class="headerlink" title="③获取当前时间戳"></a>③获取当前时间戳</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(moment().locale(<span class="string">'zh-cn'</span>).valueOf())</span><br></pre></td></tr></table></figure><h5 id="④时间头尾-主要格式化一定要HH-mm-ss"><a href="#④时间头尾-主要格式化一定要HH-mm-ss" class="headerlink" title="④时间头尾(主要格式化一定要HH:mm:ss)"></a>④时间头尾(主要格式化一定要HH:mm:ss)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment().startOf(&#39;day&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);&#x2F;&#x2F;2021-1-28 00:00:00</span><br><span class="line">moment().endOf(&#39;day&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);&#x2F;&#x2F;2021-1-28 23:59:59</span><br></pre></td></tr></table></figure><h5 id="⑤时间（string）加减法"><a href="#⑤时间（string）加减法" class="headerlink" title="⑤时间（string）加减法"></a>⑤时间（string）加减法</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment(<span class="keyword">this</span>.state.endTime, <span class="string">"YYYY-MM-DD"</span>).add(<span class="number">1</span>, <span class="string">'days'</span>).format(<span class="string">"YYYY-MM-DD"</span>)</span><br><span class="line">moment().subtract(<span class="number">7</span>, <span class="string">'days'</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Key</th><th align="left">Shorthand</th></tr></thead><tbody><tr><td align="left">years</td><td align="left">y</td></tr><tr><td align="left">quarters</td><td align="left">Q</td></tr><tr><td align="left">months</td><td align="left">M</td></tr><tr><td align="left">weeks</td><td align="left">w</td></tr><tr><td align="left">days</td><td align="left">d</td></tr><tr><td align="left">hours</td><td align="left">h</td></tr><tr><td align="left">minutes</td><td align="left">m</td></tr><tr><td align="left">seconds</td><td align="left">s</td></tr></tbody></table><h3 id="11、a标签居中：设置为block，添加宽度，标签居中，文本居中"><a href="#11、a标签居中：设置为block，添加宽度，标签居中，文本居中" class="headerlink" title="11、a标签居中：设置为block，添加宽度，标签居中，文本居中"></a>11、a标签居中：设置为block，添加宽度，标签居中，文本居中</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a   style=&#123;&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">display</span>:<span class="string">'block'</span>,<span class="attr">margin</span>:<span class="string">'0 auto'</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;  XXX  &lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12、js获取对象的长度"><a href="#12、js获取对象的长度" class="headerlink" title="12、js获取对象的长度"></a>12、js获取对象的长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(对象名称).length</span><br></pre></td></tr></table></figure><h3 id="13、js获取对象的key"><a href="#13、js获取对象的key" class="headerlink" title="13、js获取对象的key"></a>13、js获取对象的key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(对象名称) &#x2F;&#x2F;是一个数组 [&quot;xx&quot;, &quot;xx&quot;, &quot;xx&quot;, &quot;xxx&quot;, &quot;x&quot;]</span><br></pre></td></tr></table></figure><h3 id="14、js获取对象的value"><a href="#14、js获取对象的value" class="headerlink" title="14、js获取对象的value"></a>14、js获取对象的value</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.values(对象名称) &#x2F;&#x2F;是一个数组 [&quot;xx&quot;, &quot;xx&quot;, &quot;xx&quot;, &quot;xxx&quot;, &quot;x&quot;]</span><br></pre></td></tr></table></figure><h3 id="15、下载excel-下载zip-计算md5和获取视频时长"><a href="#15、下载excel-下载zip-计算md5和获取视频时长" class="headerlink" title="15、下载excel  下载zip  计算md5和获取视频时长"></a>15、下载excel  下载zip  计算md5和获取视频时长</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">beforeUpload: <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">         fileList: [...state.fileList, file],</span><br><span class="line">       &#125;));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//计算文件md5值</span></span><br><span class="line">       <span class="keyword">let</span> fileReader = <span class="keyword">new</span> FileReader(),    <span class="comment">//创建FileReader实例</span></span><br><span class="line">         time;</span><br><span class="line">       fileReader.readAsBinaryString( file );    <span class="comment">//通过fileReader读取文件二进制码</span></span><br><span class="line">       fileReader.onload = <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;    <span class="comment">//FileReader的load事件，当文件读取完毕时触发</span></span><br><span class="line">         <span class="keyword">this</span>.state.md5Value=SparkMD5.hashBinary(e.target.result);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.md5Value)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取视频时长</span></span><br><span class="line">       <span class="keyword">let</span> url = URL.createObjectURL(file);</span><br><span class="line">       <span class="keyword">let</span> audioElement = <span class="keyword">new</span> Audio(url);</span><br><span class="line">       <span class="keyword">let</span> duration;</span><br><span class="line">       audioElement.addEventListener(<span class="string">"loadedmetadata"</span>,  (_event)=&gt; &#123;</span><br><span class="line">         <span class="keyword">this</span>.state.mediaTimeAuto=<span class="built_in">parseInt</span>(audioElement.duration)+<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">this</span>.formRef.current.setFieldsValue(&#123; <span class="attr">runningTime</span>:<span class="keyword">this</span>.state.mediaTimeAuto &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p>FastDFS上传文件访问url地址直接下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fdfs 存储节点storage安装nginx,修改nginx配置文件</span><br><span class="line"></span><br><span class="line">location ~&#x2F;group[1-9]&#x2F;M00 &#123;</span><br><span class="line"></span><br><span class="line"> if ( $query_string ~* ^(.*)parameter&#x3D;config\b|1\b(.*)$ )&#123;</span><br><span class="line"></span><br><span class="line">        add_header Content-Disposition &quot;attachment;&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    root &#x2F;fdfs&#x2F;storage&#x2F;data;</span><br><span class="line"></span><br><span class="line">    ngx_fastdfs_module;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在文件url地址后面加 ?parameter&#x3D;1 ，直接下载文件</span><br><span class="line"></span><br><span class="line">例: 192.168.100.100:8888&#x2F;group1&#x2F;M00&#x2F;00&#x2F;15&#x2F;dgECTl3d4CuAqGuAADaHFkU0005.jpg?parameter&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="16、表格隐藏列"><a href="#16、表格隐藏列" class="headerlink" title="16、表格隐藏列"></a>16、表格隐藏列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签+id&gt;</span><br><span class="line">.less文件写style</span><br><span class="line">.jsx里面导入</span><br></pre></td></tr></table></figure><h3 id="17、表格多选框默认选择某几行（以默认全选为例）"><a href="#17、表格多选框默认选择某几行（以默认全选为例）" class="headerlink" title="17、表格多选框默认选择某几行（以默认全选为例）"></a>17、表格多选框默认选择某几行（以默认全选为例）</h3><p>tip：表格渲染变化是根据你是state有没有改变，所以一定要用setState</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据导入</span></span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.state.deviceDataSource.length;i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.selectedRowKeys=[...this.state.selectedRowKeys,i.toString()]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.state.deviceDataSource.length;i++)&#123;<span class="comment">//保存每行数据</span></span><br><span class="line">      <span class="keyword">this</span>.state.selectedRows=[...this.state.selectedRows,<span class="keyword">this</span>.state.deviceDataSource[i]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;selectedRowKeys&#125; = <span class="keyword">this</span>.state;<span class="comment">//细节，立刻写在下面上方</span></span><br><span class="line">    <span class="keyword">const</span> rowSelection_device = &#123;</span><br><span class="line">      type:<span class="string">'checkbox'</span>,</span><br><span class="line">      selectedRowKeys,</span><br><span class="line">      onChange: <span class="function">(<span class="params">selectedRowKeys, selectedRows</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          selectedRowKeys: selectedRowKeys,</span><br><span class="line">          selectedRows:selectedRows,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`selectedRowKeys: <span class="subst">$&#123;selectedRowKeys&#125;</span>`</span>, <span class="string">'selectedRows: '</span>, selectedRows);</span><br><span class="line">      &#125;,</span><br><span class="line">      getCheckboxProps:<span class="function">(<span class="params">record</span>)=&gt;</span>&#123;</span><br><span class="line">        defaultChecked: selectedRowKeys.includes(<span class="string">`<span class="subst">$&#123;record.key&#125;</span>`</span>)<span class="comment">//每行循环判断是否为true，若是则勾选</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h3 id="18、js-取字符串中某段"><a href="#18、js-取字符串中某段" class="headerlink" title="18、js 取字符串中某段"></a>18、js 取字符串中某段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text.substr(from,length) </span><br><span class="line">text.substring(start,end)</span><br></pre></td></tr></table></figure><h3 id="19、Link传值"><a href="#19、Link传值" class="headerlink" title="19、Link传值"></a>19、Link传值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">传数据</span><br><span class="line">&lt;Link to=&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    pathname:<span class="string">`/garbagedelivery/TrashBag/TrashBagDetail`</span>,</span><br><span class="line">    state:record,</span><br><span class="line">    或</span><br><span class="line">    state:&#123;</span><br><span class="line">             ad_dateSource:<span class="keyword">this</span>.state.ad_record,</span><br><span class="line">             play_plan:<span class="keyword">this</span>.state.selectedRows,</span><br><span class="line">          &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&gt;</span><br><span class="line">&lt;Button&gt;....</span><br><span class="line">&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">取数据</span></span><br><span class="line"><span class="regexp">Data:this.props.location.state, /</span><span class="regexp">/ Link传入的数据</span></span><br></pre></td></tr></table></figure><h3 id="20、PUT-POST-GET"><a href="#20、PUT-POST-GET" class="headerlink" title="20、PUT POST GET"></a>20、PUT POST GET</h3><p><strong>方发之间的区别：</strong></p><blockquote><p><strong>1、PUT和POST</strong></p><p>PUT和POS都有更改指定URI的语义.但PUT被定义为idempotent的方法，POST则不是.idempotent的方法:如果一个方法重复执行</p><p>多次，产生的效果是一样的，那就是idempotent的。也就是说：</p><p>PUT请求：如果两个请求相同，后一个请求会把第一个请求覆盖掉。（所以PUT用来改资源）</p><p>Post请求：后一个请求不会把第一个请求覆盖掉。（所以Post用来增资源）</p><p><strong>2、get和post</strong></p><p>1、GET参数通过URL传递，POST放在Request body中。</p><p>2、GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p><p>3、GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p><p>4、Get 请求中有非 ASCII 字符，会在请求之前进行转码，POST不用，因为POST在Request body中，通过 MIME，也就可以传输非 ASCII 字符。</p><p>5、 一般我们在浏览器输入一个网址访问网站都是GET请求</p><p>6、HTTP的底层是TCP/IP。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。但是请求的数据量太大对浏览器和服务器都是很大负担。所以业界有了不成文规定，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。</p><p>7、GET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>8、在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。但并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p></blockquote><h3 id="21、获取回收指南（二进制文件流）"><a href="#21、获取回收指南（二进制文件流）" class="headerlink" title="21、获取回收指南（二进制文件流）"></a>21、获取回收指南（二进制文件流）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getRecyclGuide=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  fetch(rootPath1+<span class="string">"/api/garbage/delivery/classification/query/getRecyclGuide"</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.blob().then(<span class="function">(<span class="params">blob</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> html = <span class="keyword">new</span> FileReader();</span><br><span class="line">      html.readAsText(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      html.onload=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result=<span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</span><br><span class="line">        result.innerHTML=html.result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22、字节流base-64解码"><a href="#22、字节流base-64解码" class="headerlink" title="22、字节流base-64解码"></a>22、字节流base-64解码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t=atob(base64)   <span class="comment">//window.btoa 与 window.atob 不支持中文</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">window</span>.btoa(<span class="built_in">encodeURIComponent</span>(<span class="string">'中文'</span>))</span><br><span class="line"><span class="string">"JUU0JUI4JUFEJUU2JTk2JTg3"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">decodeURIComponent</span>(<span class="built_in">window</span>.atob(<span class="string">'JUU0JUI4JUFEJUU2JTk2JTg3'</span>))</span><br><span class="line"><span class="string">"中文"</span></span><br></pre></td></tr></table></figure><h3 id="23、JS计算日期相差天数：2021-01-01-2021-01-03"><a href="#23、JS计算日期相差天数：2021-01-01-2021-01-03" class="headerlink" title="23、JS计算日期相差天数：2021-01-01   2021-01-03"></a>23、JS计算日期相差天数：2021-01-01   2021-01-03</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetDateDiff</span>(<span class="params">startDate,endDate</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(startDate.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>))).getTime();</span><br><span class="line"><span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(endDate.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>))).getTime();</span><br><span class="line"><span class="keyword">var</span> dates = <span class="built_in">Math</span>.abs((startTime - endTime))/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> dates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24、JS-浅、深拷贝"><a href="#24、JS-浅、深拷贝" class="headerlink" title="24、JS  浅、深拷贝"></a>24、JS  浅、深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"> 浅：</span><br><span class="line"> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> obj2=obj1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 深：</span><br><span class="line"> <span class="number">1</span>、乞丐版——使用<span class="built_in">JSON</span>.stringify()以及<span class="built_in">JSON</span>.parse()不可以拷贝 <span class="literal">undefined</span> ， <span class="function"><span class="keyword">function</span>， <span class="title">RegExp</span> 等等类型的</span></span><br><span class="line"><span class="function"> <span class="title">var</span> <span class="title">obj1</span> = </span>&#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objString = <span class="built_in">JSON</span>.stringify(obj1);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(objString);</span><br><span class="line">obj2.a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.a);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="built_in">Object</span>.assign(target, source)——多层嵌套有问题</span><br><span class="line"> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.b = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.b); <span class="comment">// 5</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.c[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.c); <span class="comment">// ["a", 5, "c"]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.c); <span class="comment">// ["a", 5, "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、递归拷贝</span><br><span class="line"><span class="comment">// 定义一个深拷贝函数  接收目标target参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个变量</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 如果当前需要深拷贝的是一个对象的话</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是一个数组的话</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target)) &#123;</span><br><span class="line">            result = []; <span class="comment">// 将result赋值为一个数组，并且执行遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">                <span class="comment">// 递归克隆数组中的每一项</span></span><br><span class="line">                result.push(deepClone(target[i]))</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">// 判断如果当前的值是null的话；直接赋值为null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target===<span class="literal">null</span>) &#123;</span><br><span class="line">            result = <span class="literal">null</span>;</span><br><span class="line">         <span class="comment">// 判断如果当前的值是一个RegExp对象的话，直接赋值    </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target.constructor===<span class="built_in">RegExp</span>)&#123;</span><br><span class="line">            result = target;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 否则是普通对象，直接for in循环，递归赋值对象的所有值</span></span><br><span class="line">            result = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">                result[i] = deepClone(target[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">// 如果不是对象的话，就是基本数据类型，那么直接赋值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = target;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 返回最终结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">        <span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            c: <span class="regexp">/a/</span>,</span><br><span class="line">            d: <span class="literal">undefined</span>,</span><br><span class="line">            b: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">        &#125;,</span><br><span class="line">        c: [</span><br><span class="line">            &#123;</span><br><span class="line">                a: <span class="string">'c'</span>,</span><br><span class="line">                b: <span class="regexp">/b/</span>,</span><br><span class="line">                c: <span class="literal">undefined</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'a'</span>,</span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> obj2 = deepClone(obj1);</span><br><span class="line">        <span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//base64可能有用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBase64</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(reader.result);</span><br><span class="line">    reader.onerror = <span class="function"><span class="params">error</span> =&gt;</span> reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> previewImage = <span class="keyword">await</span> getBase64(file.originFileObj);</span><br><span class="line"></span><br><span class="line"> &lt;img alt=<span class="string">"example"</span> style=&#123;&#123; <span class="attr">width</span>: <span class="string">'100%'</span> &#125;&#125; src=&#123;previewImage&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="25、保留小数点后两位"><a href="#25、保留小数点后两位" class="headerlink" title="25、保留小数点后两位"></a>25、保留小数点后两位</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(number * <span class="number">100</span>) / <span class="number">100</span>  <span class="comment">// 四舍五入</span></span><br><span class="line">number.toFixed(<span class="number">2</span>)  <span class="comment">//无四舍五入</span></span><br></pre></td></tr></table></figure><h3 id="26、HTTP协议POST服务器：json与form表单的区别"><a href="#26、HTTP协议POST服务器：json与form表单的区别" class="headerlink" title="26、HTTP协议POST服务器：json与form表单的区别"></a>26、HTTP协议POST服务器：json与form表单的区别</h3><p>1、form</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">头：数据类型：Content-Type:application/x-www-form-urlencoded（数据格式）;charset=UTF<span class="number">-8</span>（编码格式）</span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">'xxx'</span>,xxx);</span><br><span class="line">fetch(<span class="string">'xxx'</span>,&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    body: formData,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;...&#125;)</span><br></pre></td></tr></table></figure><p>2、json（对象数组）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">头：数据类型：Content-Type:application/json（数据格式）;charset=UTF<span class="number">-8</span>（编码格式，根据情况填写）</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> Obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Obj.xxx = xxx;</span><br><span class="line">arr.push(Obj);</span><br><span class="line">fetch(<span class="string">'xxx'</span>,&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(arr),<span class="comment">//或直接[JSON.stringify(&#123;xxx:xxx,xxx:xxx&#125;)] （可能）</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;...&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Ant Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ant Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd——获取表格Table指定行的数据</title>
      <link href="/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近项目中，依然负责前端这一块，数据被装到Table表格里面，点击编辑需要自动获取到那一行的数据，然后自动打开一个Form表单窗口，把这一行的数据自动填上Form表单中作为初始值，最后你就可以通过Form表单修改内容，调用接口重新渲染一下数据，这就完成了编辑功能。</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/1595646004(1).png" alt="1595646004(1)"></p><h1 id="问题：如何获取那一行的数据"><a href="#问题：如何获取那一行的数据" class="headerlink" title="问题：如何获取那一行的数据"></a>问题：如何获取那一行的数据</h1><p>查阅官网<a href="https://ant.design/components/overview-cn/" target="_blank" rel="noopener">antd组件</a>里面有个render函数，描述情况是：render——生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return 里面可以设置表格行/列合并——function(text, record, index) {}</p><p>我要使用record来获取那一行数据，于是按下面图片写代码就实现了</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/image-20200725112256975.png" alt="image-20200725112256975"></p><p><strong>注：render一定要写两个参数（text, record），调用点击编辑函数onClick()一定要按上图所示，不然会报错！！！</strong></p><br><br><br><p>这么简单就能成功，但是过程是十分艰辛的，花了好几个小时，百度了好多文章，再叨唠一下，参数一定要加上，而且一定要用  <code>（）=&gt; this.函数（record）</code> 这样才能获取到行数据，百度到的<code>this.函数.bind(rec)</code>我是不能成功，不知道你们能不能成功</p><br><p>老规矩，欢迎留言！</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Ant Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Ant Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd——Form.Item下的子组件value值不生效问题</title>
      <link href="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近做的项目前端是用React+Ant Design，在表单<code>&lt;Form&gt;</code>组件下，有好几个<code>&lt;Form.Item&gt;</code>，其中两个<code>&lt;Form.Item&gt;</code>下有<code>&lt;Select&gt;</code>，里面有固定的<code>&lt;Option&gt;</code>，具体如下图所示：</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/1595641213(1).png" alt="1595641213(1)"></p><hr><h1 id="Question1：select选择器的默认值提交后显示未定义"><a href="#Question1：select选择器的默认值提交后显示未定义" class="headerlink" title="Question1：select选择器的默认值提交后显示未定义"></a>Question1：<code>select选择器</code>的默认值提交后显示未定义</h1><p>在<a href="https://ant.design/components/overview-cn/" target="_blank" rel="noopener">antd组件</a>中查看到，被设置了 <code>name</code> 属性的 <code>Form.Item</code> 包装的控件，表单控件会自动添加 <code>value</code>（或 <code>valuePropName</code> 指定的其他属性） <code>onChange</code>（或 <code>trigger</code> 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：</p><ol><li>你不再需要也不应该用 <code>onChange</code> 来做数据收集同步（你可以使用 Form 的 <code>onValuesChange</code>），但还是可以继续监听 <code>onChange</code> 事件。</li><li>你不能用控件的 <code>value</code> 或 <code>defaultValue</code> 等属性来设置表单域的值，默认值可以用 Form 里的 <code>initialValues</code> 来设置。注意 <code>initialValues</code> 不能被 <code>setState</code> 动态更新，你需要用 <code>setFieldsValue</code> 来更新。</li><li>你不应该用 <code>setState</code>，可以使用 <code>form.setFieldsValue</code> 来动态改变表单值。</li></ol><br><p><u><strong>简单的说，我遇到的问题正如第二段描述的那样，form控件很贴心的给我们准备了<code>initialValues</code></strong></u> </p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/image-20200725095523218.png" alt="image-20200725095523218"></p><p><u><strong>我们只需要在form控件中加入这个属性就行</strong></u></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form</span><br><span class="line">    name=<span class="string">"xxx"</span></span><br><span class="line">    initialValues=&#123;&#123;   <span class="comment">//赋初始值</span></span><br><span class="line">    FactName: <span class="keyword">this</span>.state.tempDataSource.FactName,</span><br><span class="line">    manuType: <span class="keyword">this</span>.state.tempDataSource.type,</span><br><span class="line">    phone: <span class="keyword">this</span>.state.tempDataSource.phone,</span><br><span class="line">    proModel: <span class="keyword">this</span>.state.tempDataSource.model,</span><br><span class="line">    people: <span class="keyword">this</span>.state.tempDataSource.people,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;<span class="regexp">/Form&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Question2：两个select选择器联动失效"><a href="#Question2：两个select选择器联动失效" class="headerlink" title="Question2：两个select选择器联动失效"></a>Question2：两个<code>select选择器</code>联动失效</h1><p>我举官网上的示例说明一下这个问题</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/image-20200725100942603.png" alt="image-20200725100942603"></p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/image-20200725100958461.png" alt="image-20200725100958461"></p><p>当我选择第一个select值为zhejiang时，第二个选择器自动选择默认的第一个值hangzhou</p><p>当我选择第一个select值为jiangsu时，第二个选择器自动选择默认的第一个值nanjing</p><br><p><strong>但是当你的select选择器嵌套在form表单时，select选择器中的value值失效了，就不能自动获取到另一个select选择器的value值，导致select选择器直接的联动失效，这时候该怎么办呢？</strong></p><br><p>我们可以通过 <code>ref</code> 获取数据域，步骤是：</p><ol><li>定义字段  formRef = React.createRef();</li><li>在select选择器触发选择的函数里面添加   this.formRef.current.setFieldsValue({  …  });</li><li>在Form表单里添加属性    ref={this.formRef}</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">formRef = React.createRef&lt;FormInstance&gt;();</span><br><span class="line"></span><br><span class="line">    onGenderChange = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.formRef.current.setFieldsValue(&#123;</span><br><span class="line">          ...<span class="comment">//设置第二个select选择器的值</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">      &lt;Form  ref=&#123;<span class="keyword">this</span>.formRef&#125; name=<span class="string">"xxx"</span> onFinish=&#123;<span class="keyword">this</span>.onFinish&#125;&gt;</span><br><span class="line">                ...</span><br><span class="line">                &lt;Select onGenderChange&gt;  ...   &lt;<span class="regexp">/Select&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Select&gt;  ...   &lt;/</span>Select&gt;</span><br><span class="line">      &lt;<span class="regexp">/Form&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><br><br><br><br><br><br><br><p><strong>到此我遇到的两个问题解决了，如果你们有什么疑问或者遇到什么新的问题欢迎留言讨论！！！</strong></p><br><br><br><br><br><br><br>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Ant Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Ant Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加快访问速度+设置个人域名</title>
      <link href="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/"/>
      <url>/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、加快访问速度"><a href="#一、加快访问速度" class="headerlink" title="一、加快访问速度"></a>一、加快访问速度</h1><p>hexo+github访问速度超慢！！！</p><ul><li><p>原因：托管网站的github是外网，访问外网速度慢。</p></li><li><p>解决方法：采用hexo+github+coding</p></li></ul><p>（coding：大家可以理解为中国版的github，如果把代码既托管到coding上，又托管到github上，让大陆的用户访问的是由coding托管的网站，境外的用户访问的是由github托管的网站，这样访问速度就能上去了）</p><h2 id="1、创建coding账号"><a href="#1、创建coding账号" class="headerlink" title="1、创建coding账号"></a>1、创建<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>账号</h2><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720160527550.png" alt="image-20200720160527550"></p><h2 id="2、创建与账号同名的项目"><a href="#2、创建与账号同名的项目" class="headerlink" title="2、创建与账号同名的项目"></a>2、创建与账号同名的项目</h2><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720160603944.png" alt="image-20200720160603944"></p><p>点击进入项目→右下角项目设置→功能开关，建议都打开，方便部署静态网站</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720163003596.png" alt="image-20200720163003596"></p><h2 id="3、修改站点配置文件-config-yml"><a href="#3、修改站点配置文件-config-yml" class="headerlink" title="3、修改站点配置文件_config.yml"></a>3、修改站点配置文件<code>_config.yml</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#格式一定要正确，不然会报错</span><br><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: </span><br><span class="line">      github:</span><br><span class="line">          https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io</span><br><span class="line">      coding:</span><br><span class="line">          https:&#x2F;&#x2F;e.coding.net&#x2F;xxx&#x2F;xxx&#x2F;xxx.git</span><br><span class="line">  branch: &#39;master&#39;</span><br></pre></td></tr></table></figure><p>主页→项目→xxx→代码仓库→设置，复制粘贴到coding下</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720162119597.png" alt="image-20200720162119597"></p><h2 id="4、远端部署"><a href="#4、远端部署" class="headerlink" title="4、远端部署"></a>4、远端部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>这样本地博客就能同时同步到github和coding</p><h2 id="5、静态网站部署"><a href="#5、静态网站部署" class="headerlink" title="5、静态网站部署"></a>5、静态网站部署</h2><p>点击项目左边菜单栏 持续部署→静态网站</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720163758840.png" alt="image-20200720163758840"></p><br><h1 id="二、设置个人域名"><a href="#二、设置个人域名" class="headerlink" title="二、设置个人域名"></a>二、设置个人域名</h1><h2 id="1、购买域名"><a href="#1、购买域名" class="headerlink" title="1、购买域名"></a>1、购买域名</h2><p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5" target="_blank" rel="noopener">阿里云</a>上买一个域名，我买的是 <code>giser.online</code>（是最便宜的，8块钱一年），各个后缀的价格不太一样，之后实名认证，然后在域名控制台中看到你购买的域名。</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720154241154.png" alt="image-20200720154241154"></p><h2 id="2、解析域名"><a href="#2、解析域名" class="headerlink" title="2、解析域名"></a>2、解析域名</h2><p>点击上图解析，增加一条CNAME信息，记录值为部署静态网站中的访问地址，此为境内访问coding</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164020891.png" alt="image-20200720164020891"></p><p>继续解析，增加一条CNAME信息，记录值为youruser.github.io （youruser为你的github用户名）,此为境外访问github</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164302658.png" alt="image-20200720164302658"></p><p>最终结果为下图：</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720154630256.png" alt="image-20200720154630256"></p><h2 id="3、绑定域名"><a href="#3、绑定域名" class="headerlink" title="3、绑定域名"></a>3、绑定域名</h2><p>登录github，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164706261.png" alt="image-20200720164706261"></p><p>登录coding，进入之前创建的仓库，点击静态网站→右上角设置→自定义域名，输入你的域名</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164914047.png" alt="image-20200720164914047"></p><br><p>*<u><strong>ps：此方法只需要花点小钱买个域名，不需要专门去买服务器，完成上述操作后需耐心等待一段时间就能登录自己的域名访问博客（现在国内政策是域名要备案，不然要被封网站，不过好像备案需要买个服务器，购买服务器可是一笔不小的开支）</strong></u>*</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2020/07/16/%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/07/16/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="note default">            <p>default 提示块标籤</p>          </div><div class="note primary no-icon">            <p>primary 提示块标籤</p>          </div><div class="note success">            <p>success 提示块标籤</p>          </div><div class="note info">            <p>info 提示块标籤</p>          </div><div class="note warning">            <p>warning 提示块标籤</p>          </div><div class="note danger">            <p>danger 提示块标籤</p>          </div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站专栏文章复制</title>
      <link href="/2020/07/16/B%E7%AB%99%E4%B8%93%E6%A0%8F%E6%96%87%E7%AB%A0%E5%A4%8D%E5%88%B6/"/>
      <url>/2020/07/16/B%E7%AB%99%E4%B8%93%E6%A0%8F%E6%96%87%E7%AB%A0%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="pc端b站专栏文章不可复制，在控制台执行一下代码即可"><a href="#pc端b站专栏文章不可复制，在控制台执行一下代码即可" class="headerlink" title="pc端b站专栏文章不可复制，在控制台执行一下代码即可"></a>pc端b站专栏文章不可复制，在控制台执行一下代码即可</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'div.article-holder'</span>).classList.remove(<span class="string">'unable-reprint'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'div.article-holder'</span>).addEventListener(<span class="string">'copy'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.clipboardData.setData(<span class="string">"text"</span>,<span class="built_in">window</span>.getSelection().toString())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//移除'不可复制'属性，添加事件监听</span></span><br></pre></td></tr></table></figure><br><br><br><br><br><p>版权声明：本文为CSDN博主「Haip」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p><p>原文链接：<a href="https://blog.csdn.net/u014324940/article/details/105101547/" target="_blank" rel="noopener">https://blog.csdn.net/u014324940/article/details/105101547/</a></p>]]></content>
      
      
      <categories>
          
          <category> Bilibili </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、本地部署"><a href="#一、本地部署" class="headerlink" title="一、本地部署"></a>一、本地部署</h1><h2 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h2><p>windows：到git官网上下载，<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>，下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git，不用自带的cmd，因为它有点难用。</p><h2 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h2><p>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a> 选择LTS版本就行了。</p><h2 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h2><p>右键Git Bash Here，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo -cli&#x2F;&#x2F;若出错请看下文踩坑部分</span><br></pre></td></tr></table></figure><p>安装完毕后文件路径在你安装的node.js文件下的node_global\node_modules\hexo</p><h2 id="4、初始化Hexo"><a href="#4、初始化Hexo" class="headerlink" title="4、初始化Hexo"></a>4、初始化Hexo</h2><p>在你想创建Blog文件夹的磁盘下面右键Git Bash Here，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init Blog</span><br><span class="line">cd Blog &#x2F;&#x2F;进入这个myblog文件夹，也可以直接右键创建好的Blog文件夹点击Git Bash Here</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>继续输入命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g&#x2F;&#x2F;或者 hexo generate</span><br><span class="line">hexo s&#x2F;&#x2F;或者hexo server</span><br></pre></td></tr></table></figure><p>启动hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了，使用ctrl+c可以把服务关掉。</p><p><em>tip：所有的操作都基于Blog文件夹，如若出错大不了直接删除Blog重新来，不要畏手畏脚</em></p><h1 id="二、远端部署"><a href="#二、远端部署" class="headerlink" title="二、远端部署"></a>二、远端部署</h1><h2 id="1、登录或注册GitHub账户"><a href="#1、登录或注册GitHub账户" class="headerlink" title="1、登录或注册GitHub账户"></a>1、登录或注册GitHub账户</h2><p>登录后或注册完（tip:注册一个你觉得好听的名字，关系到后面的域名），在GitHub.com中看到一个New repository，新建仓库</p><p>必须创建一个和你用户名xxx相同的仓库，后面加.github.io（xxx.github.io //这就是名字取好听点的原因）</p><h2 id="2、将hexo部署到GitHub"><a href="#2、将hexo部署到GitHub" class="headerlink" title="2、将hexo部署到GitHub"></a>2、将hexo部署到GitHub</h2><p>打开Blog文件夹下面的配置文件 <code>_config.yml</code>，翻到最后，修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令，这样你才能用命令部署到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &#x2F;&#x2F;或hexo clean       清除了你之前生成的东西，网页没什么错误基本不用</span><br><span class="line">hexo g &#x2F;&#x2F;或hexo generate     或生成静态文章</span><br><span class="line">hexo d &#x2F;&#x2F;或hexo deploy       部署文章</span><br></pre></td></tr></table></figure><p><em>注意：远端部署一定要先 <code>hexo g</code>，然后 <code>hexo d</code></em></p><p>当然如果觉得这个网址逼格不太够，你可以自己花点小钱购买个域名，具体操作请百度</p><h1 id="三、写博客"><a href="#三、写博客" class="headerlink" title="三、写博客"></a>三、写博客</h1><h2 id="1、布局"><a href="#1、布局" class="headerlink" title="1、布局"></a>1、布局</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="center">布局</th><th align="center">路径</th></tr></thead><tbody><tr><td align="center">post</td><td align="center">source/_posts</td></tr><tr><td align="center">page</td><td align="center">source</td></tr><tr><td align="center">draft</td><td align="center">source/_drafts</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;xxx&quot; &#x2F;&#x2F;或者hexo new &quot;xxx&quot;、 hexo new post &quot;xxx&quot; (有引号)</span><br></pre></td></tr></table></figure><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &quot;xxx&quot;  (有引号)</span><br></pre></td></tr></table></figure><p>这样会在source/_draft中新建一个xxx.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 <code>hexo server --draft</code> 在本地端口中开启服务预览。如果你的草稿文件写完了，想要发表到post中，可以使用<code>hexo publish draft xxx</code> ，就会自动把xxx.md发送到post中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page xxx  (无引号)</span><br></pre></td></tr></table></figure><p>另起一页，系统会自动给你在source文件夹下创建一个xxx文件夹，以及xxx文件夹中的index.md，这样你访问的xxx对应的链接就是<code>http://localhost:4000/xxx 或者 域名/xxx</code></p><h2 id="2、内容"><a href="#2、内容" class="headerlink" title="2、内容"></a>2、内容</h2><p>如果不会MarkDown语法写文章，推荐下载<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>，轻松写博客。</p><h1 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h1><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<a href="https://hexo.io/themes/" target="_blank" rel="noopener">点这里</a></p><p>兄弟们也可以参考我使用的主题，个人感觉还是挺漂亮的，步骤如下：</p><h2 id="1、下载主题"><a href="#1、下载主题" class="headerlink" title="1、下载主题"></a>1、下载主题</h2><p>右键Blog文件夹，点击Git Bash Here，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>下载好的主题在<code>Blog\themes\butterfly</code>可以查看到</p><h2 id="2、应用主题"><a href="#2、应用主题" class="headerlink" title="2、应用主题"></a>2、应用主题</h2><p>修改站点配置文件<code>_config.yml</code>，把主題改为<code>butterfly</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h1 id="五、Hexo踩坑之路"><a href="#五、Hexo踩坑之路" class="headerlink" title="五、Hexo踩坑之路"></a>五、Hexo踩坑之路</h1><h2 id="1、npm-install-g-hexo-cli-命令错误"><a href="#1、npm-install-g-hexo-cli-命令错误" class="headerlink" title="1、npm install -g hexo -cli 命令错误"></a>1、<code>npm install -g hexo -cli</code> 命令错误</h2><p>安装hexo中出现报错<code>npm WARN deprecated hexo-bunyan@2.0.0: Please see https://github.com/hexojs/hexo-bunyan/issues/17</code></p><p>解决办法：将<code>npm install -g hexo -cli</code>改成<code>npm install -g hexo -log</code></p><p>问题分析：根据报错给出的网站 <code>https://github.com/hexojs/hexo-bunyan/issues/17</code>来看，hexo-log v2.0.0发布后就不再推荐使用hexo-bunyan，猜想hexo官方文档给出的npm install -g hexo-cli命令默认安装hexo-bunyan，尝试改成hexo-log之后就可以继续下一步了。</p><h2 id="2、Typora写博客时网页图片加载失败"><a href="#2、Typora写博客时网页图片加载失败" class="headerlink" title="2、Typora写博客时网页图片加载失败"></a>2、Typora写博客时网页图片加载失败</h2><p>解决办法：</p><ul><li><p>首先把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p></li><li><p>其次下载安装一个可以上传本地图片的插件<code>hexo-asset-image</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save  &#x2F;&#x2F;下载插件</span><br><span class="line">hexo n &quot;xxx&quot;  &#x2F;在下载完插件后，使用hexo命令新建文章时，posts目录下会生成同名文件夹；</span><br><span class="line">#远端部署</span><br><span class="line">hexo g  &#x2F;&#x2F;在文件夹里可以存放相应的图片，然后在hexo g编译文件的时候，图片会自动生成到public中</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>然后设置Typora–文件–偏好设置</li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Typora%E8%AE%BE%E7%BD%AE.png" alt="1594900826(1)"></p><ul><li>最后把图片拖动到Typora中，点击<code>复制图片到</code>同名文件夹中，最后图片成功在网页中显示</li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84.png" alt="1594901055(1)"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
