<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>antd相关记录</title>
      <link href="/2021/03/27/antd%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/03/27/antd%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1、antd-Pro项目创建"><a href="#1、antd-Pro项目创建" class="headerlink" title="1、antd-Pro项目创建"></a>1、antd-Pro项目创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir &lt;your-project-name&gt;</span><br><span class="line">$ cd &lt;your-project-name&gt;</span><br><span class="line">$ yarn create umi  # or npm create umi</span><br><span class="line">---------------------</span><br><span class="line">推荐或者</span><br><span class="line">1、创建文件夹，用ide打开</span><br><span class="line">2、cnpm create umi</span><br><span class="line"></span><br><span class="line"># Choose ant-design-pro:</span><br><span class="line"> Select the boilerplate type (Use arrow keys)</span><br><span class="line">❯ ant-design-pro  - Create project with an layout-only ant-design-pro boilerplate, use together with umi block.</span><br><span class="line">  app             - Create project with a simple boilerplate, support typescript.</span><br><span class="line">  block           - Create a umi block.</span><br><span class="line">  library         - Create a library with umi.</span><br><span class="line">  plugin          - Create a umi plugin.</span><br><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">$ npm install</span><br><span class="line">$ npm start         # visit http:&#x2F;&#x2F;localhost:8000</span><br></pre></td></tr></table></figure><h3 id="2、在-React-Vue-Angular-中使用-G2"><a href="#2、在-React-Vue-Angular-中使用-G2" class="headerlink" title="2、在 React / Vue / Angular 中使用 G2"></a>2、在 React / Vue / Angular 中使用 G2</h3><p>基于 AntV 技术栈还有许多优秀的项目，在 React 环境下使用 G2，我们推荐使用 BizCharts 和 Viser-react！这两个产品都是基于 G2 的 React 版本封装，使用体验更符合 React 技术栈的习惯，他们都与 AntV 有着紧密的协同，他们很快也将同步开源和发布基于 G2 4.0 的版本。</p><ul><li>BizCharts 地址：<a href="https://bizcharts.net/" target="_blank" rel="noopener">https://bizcharts.net</a></li><li>Viser 地址：<a href="https://viserjs.github.io/" target="_blank" rel="noopener">https://viserjs.github.io/</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> onSelect = <span class="function">(<span class="params">val, option</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> initData = <span class="keyword">this</span>.state.getByServerData;</span><br><span class="line">  <span class="keyword">const</span> fitList = initData.filter(<span class="function"><span class="params">r</span> =&gt;</span> r.ipAddress === option.props.text);</span><br><span class="line"><span class="keyword">const</span> dataSource = &#123; <span class="attr">items</span>: fitList, <span class="attr">totalCount</span>: fitList.length &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; items, totalCount &#125; = dataSource;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">pageIndex</span>: <span class="number">1</span>, items, totalCount, <span class="attr">listloading</span>: <span class="literal">false</span>, <span class="attr">isSeach</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   handleSearch = <span class="function"><span class="params">value</span> =&gt;</span> value ? <span class="keyword">this</span>.tabGetList(<span class="number">0</span>, <span class="number">10</span>, value) : <span class="keyword">this</span>.tabGetList(<span class="number">0</span>, <span class="number">10</span>, <span class="literal">null</span>) &amp;&amp; <span class="keyword">this</span>.setState(&#123; <span class="attr">isSeach</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  renderOption = <span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">Option</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">text</span>=<span class="string">&#123;item.ipAddress&#125;</span>&gt;</span></span></span><br><span class="line">    &lt;div className="global-search-item"&gt;</span><br><span class="line">    &lt;span className="global-search-item-desc"&gt;&#123;item.ipAddress&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span className="global-search-item-count"&gt;&#123;item.manager.split('&amp;')[0]&#125; &lt;/span&gt;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"> render() &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; data, total, current, getByServerData, isSeach &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> seachResults = getByServerData.length &gt; <span class="number">0</span> ? getByServerData.map(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.renderOption(r);</span><br><span class="line">   &#125;) : [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;Row gutter=&#123;<span class="number">16</span>&#125; className=&#123;cls.searchRow&#125;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Search placeholder=<span class="string">'输入查询条件进行搜索'</span></span><br><span class="line">        seachResults=&#123;seachResults&#125;</span><br><span class="line">        onSelect=&#123;<span class="keyword">this</span>.onSelect&#125;</span><br><span class="line">        handleSearch=&#123;<span class="keyword">this</span>.handleSearch&#125;</span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/Row&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、react下载和跳转链接"><a href="#3、react下载和跳转链接" class="headerlink" title="3、react下载和跳转链接"></a>3、react下载和跳转链接</h3><h3 id="4、form表单提交"><a href="#4、form表单提交" class="headerlink" title="4、form表单提交"></a>4、form表单提交</h3><h3 id="5、·树treenode"><a href="#5、·树treenode" class="headerlink" title="5、·树treenode"></a>5、·树treenode</h3><h3 id="6、禁用disabled"><a href="#6、禁用disabled" class="headerlink" title="6、禁用disabled"></a>6、禁用disabled</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&#123;&#123;pointerEvents:&#39;none&#39;&#125;&#125; &gt;</span><br><span class="line">  &lt;Space size&#x3D;&quot;middle&quot;&gt;</span><br><span class="line">    &lt;Checkbox.Group  options&#x3D;&#123;this.state.Options&#125; defaultValue&#x3D;&#123;text&#125;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Space&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>同一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style&#x3D;&#123;&#123;verticalAlign:&#39;middle&#39;, marginTop:&#39;0&#39;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="7、格式化-n-t"><a href="#7、格式化-n-t" class="headerlink" title="7、格式化\n\t"></a>7、格式化\n\t</h3><p><code>&lt;pre&gt;&lt;/pre&gt;</code></p><h3 id="8、时间戳转Data转字符串"><a href="#8、时间戳转Data转字符串" class="headerlink" title="8、时间戳转Data转字符串"></a>8、时间戳转Data转字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringTime&#x3D;moment(new Date(时间戳)).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);</span><br></pre></td></tr></table></figure><h3 id="9、字符串转Data"><a href="#9、字符串转Data" class="headerlink" title="9、字符串转Data"></a>9、字符串转Data</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment(StringTime, &quot;HH:mm:ss&quot;),</span><br></pre></td></tr></table></figure><h3 id="10、Data-moment"><a href="#10、Data-moment" class="headerlink" title="10、Data moment"></a>10、Data moment</h3><h5 id="①Data转时间戳"><a href="#①Data转时间戳" class="headerlink" title="①Data转时间戳"></a>①Data转时间戳</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment().valueOf()</span><br></pre></td></tr></table></figure><h5 id="②获取当前时间"><a href="#②获取当前时间" class="headerlink" title="②获取当前时间"></a>②获取当前时间</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(moment().locale(<span class="string">'zh-cn'</span>).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>))</span><br></pre></td></tr></table></figure><h5 id="③获取当前时间戳"><a href="#③获取当前时间戳" class="headerlink" title="③获取当前时间戳"></a>③获取当前时间戳</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(moment().locale(<span class="string">'zh-cn'</span>).valueOf())</span><br></pre></td></tr></table></figure><h5 id="④时间头尾-主要格式化一定要HH-mm-ss"><a href="#④时间头尾-主要格式化一定要HH-mm-ss" class="headerlink" title="④时间头尾(主要格式化一定要HH:mm:ss)"></a>④时间头尾(主要格式化一定要HH:mm:ss)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment().startOf(&#39;day&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);&#x2F;&#x2F;2021-1-28 00:00:00</span><br><span class="line">moment().endOf(&#39;day&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);&#x2F;&#x2F;2021-1-28 23:59:59</span><br></pre></td></tr></table></figure><h5 id="⑤时间（string）加减法"><a href="#⑤时间（string）加减法" class="headerlink" title="⑤时间（string）加减法"></a>⑤时间（string）加减法</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment(<span class="keyword">this</span>.state.endTime, <span class="string">"YYYY-MM-DD"</span>).add(<span class="number">1</span>, <span class="string">'days'</span>).format(<span class="string">"YYYY-MM-DD"</span>)</span><br><span class="line">moment().subtract(<span class="number">7</span>, <span class="string">'days'</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Key</th><th align="left">Shorthand</th></tr></thead><tbody><tr><td align="left">years</td><td align="left">y</td></tr><tr><td align="left">quarters</td><td align="left">Q</td></tr><tr><td align="left">months</td><td align="left">M</td></tr><tr><td align="left">weeks</td><td align="left">w</td></tr><tr><td align="left">days</td><td align="left">d</td></tr><tr><td align="left">hours</td><td align="left">h</td></tr><tr><td align="left">minutes</td><td align="left">m</td></tr><tr><td align="left">seconds</td><td align="left">s</td></tr></tbody></table><h3 id="11、a标签居中：设置为block，添加宽度，标签居中，文本居中"><a href="#11、a标签居中：设置为block，添加宽度，标签居中，文本居中" class="headerlink" title="11、a标签居中：设置为block，添加宽度，标签居中，文本居中"></a>11、a标签居中：设置为block，添加宽度，标签居中，文本居中</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a   style=&#123;&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">display</span>:<span class="string">'block'</span>,<span class="attr">margin</span>:<span class="string">'0 auto'</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;  XXX  &lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12、js获取对象的长度"><a href="#12、js获取对象的长度" class="headerlink" title="12、js获取对象的长度"></a>12、js获取对象的长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(对象名称).length</span><br></pre></td></tr></table></figure><h3 id="13、js获取对象的key"><a href="#13、js获取对象的key" class="headerlink" title="13、js获取对象的key"></a>13、js获取对象的key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(对象名称) &#x2F;&#x2F;是一个数组 [&quot;xx&quot;, &quot;xx&quot;, &quot;xx&quot;, &quot;xxx&quot;, &quot;x&quot;]</span><br></pre></td></tr></table></figure><h3 id="14、js获取对象的value"><a href="#14、js获取对象的value" class="headerlink" title="14、js获取对象的value"></a>14、js获取对象的value</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.values(对象名称) &#x2F;&#x2F;是一个数组 [&quot;xx&quot;, &quot;xx&quot;, &quot;xx&quot;, &quot;xxx&quot;, &quot;x&quot;]</span><br></pre></td></tr></table></figure><h3 id="15、下载excel-下载zip-计算md5和获取视频时长"><a href="#15、下载excel-下载zip-计算md5和获取视频时长" class="headerlink" title="15、下载excel  下载zip  计算md5和获取视频时长"></a>15、下载excel  下载zip  计算md5和获取视频时长</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">beforeUpload: <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">         fileList: [...state.fileList, file],</span><br><span class="line">       &#125;));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//计算文件md5值</span></span><br><span class="line">       <span class="keyword">let</span> fileReader = <span class="keyword">new</span> FileReader(),    <span class="comment">//创建FileReader实例</span></span><br><span class="line">         time;</span><br><span class="line">       fileReader.readAsBinaryString( file );    <span class="comment">//通过fileReader读取文件二进制码</span></span><br><span class="line">       fileReader.onload = <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;    <span class="comment">//FileReader的load事件，当文件读取完毕时触发</span></span><br><span class="line">         <span class="keyword">this</span>.state.md5Value=SparkMD5.hashBinary(e.target.result);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.md5Value)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取视频时长</span></span><br><span class="line">       <span class="keyword">let</span> url = URL.createObjectURL(file);</span><br><span class="line">       <span class="keyword">let</span> audioElement = <span class="keyword">new</span> Audio(url);</span><br><span class="line">       <span class="keyword">let</span> duration;</span><br><span class="line">       audioElement.addEventListener(<span class="string">"loadedmetadata"</span>,  (_event)=&gt; &#123;</span><br><span class="line">         <span class="keyword">this</span>.state.mediaTimeAuto=<span class="built_in">parseInt</span>(audioElement.duration)+<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">this</span>.formRef.current.setFieldsValue(&#123; <span class="attr">runningTime</span>:<span class="keyword">this</span>.state.mediaTimeAuto &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p>FastDFS上传文件访问url地址直接下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fdfs 存储节点storage安装nginx,修改nginx配置文件</span><br><span class="line"></span><br><span class="line">location ~&#x2F;group[1-9]&#x2F;M00 &#123;</span><br><span class="line"></span><br><span class="line"> if ( $query_string ~* ^(.*)parameter&#x3D;config\b|1\b(.*)$ )&#123;</span><br><span class="line"></span><br><span class="line">        add_header Content-Disposition &quot;attachment;&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    root &#x2F;fdfs&#x2F;storage&#x2F;data;</span><br><span class="line"></span><br><span class="line">    ngx_fastdfs_module;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在文件url地址后面加 ?parameter&#x3D;1 ，直接下载文件</span><br><span class="line"></span><br><span class="line">例: 192.168.100.100:8888&#x2F;group1&#x2F;M00&#x2F;00&#x2F;15&#x2F;dgECTl3d4CuAqGuAADaHFkU0005.jpg?parameter&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="16、表格隐藏列"><a href="#16、表格隐藏列" class="headerlink" title="16、表格隐藏列"></a>16、表格隐藏列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签+id&gt;</span><br><span class="line">.less文件写style</span><br><span class="line">.jsx里面导入</span><br></pre></td></tr></table></figure><h3 id="17、表格多选框默认选择某几行（以默认全选为例）"><a href="#17、表格多选框默认选择某几行（以默认全选为例）" class="headerlink" title="17、表格多选框默认选择某几行（以默认全选为例）"></a>17、表格多选框默认选择某几行（以默认全选为例）</h3><p>tip：表格渲染变化是根据你是state有没有改变，所以一定要用setState</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据导入</span></span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.state.deviceDataSource.length;i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.selectedRowKeys=[...this.state.selectedRowKeys,i.toString()]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.state.deviceDataSource.length;i++)&#123;<span class="comment">//保存每行数据</span></span><br><span class="line">      <span class="keyword">this</span>.state.selectedRows=[...this.state.selectedRows,<span class="keyword">this</span>.state.deviceDataSource[i]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;selectedRowKeys&#125; = <span class="keyword">this</span>.state;<span class="comment">//细节，立刻写在下面上方</span></span><br><span class="line">    <span class="keyword">const</span> rowSelection_device = &#123;</span><br><span class="line">      type:<span class="string">'checkbox'</span>,</span><br><span class="line">      selectedRowKeys,</span><br><span class="line">      onChange: <span class="function">(<span class="params">selectedRowKeys, selectedRows</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          selectedRowKeys: selectedRowKeys,</span><br><span class="line">          selectedRows:selectedRows,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`selectedRowKeys: <span class="subst">$&#123;selectedRowKeys&#125;</span>`</span>, <span class="string">'selectedRows: '</span>, selectedRows);</span><br><span class="line">      &#125;,</span><br><span class="line">      getCheckboxProps:<span class="function">(<span class="params">record</span>)=&gt;</span>&#123;</span><br><span class="line">        defaultChecked: selectedRowKeys.includes(<span class="string">`<span class="subst">$&#123;record.key&#125;</span>`</span>)<span class="comment">//每行循环判断是否为true，若是则勾选</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h3 id="18、js-取字符串中某段"><a href="#18、js-取字符串中某段" class="headerlink" title="18、js 取字符串中某段"></a>18、js 取字符串中某段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text.substr(from,length) </span><br><span class="line">text.substring(start,end)</span><br></pre></td></tr></table></figure><h3 id="19、Link传值"><a href="#19、Link传值" class="headerlink" title="19、Link传值"></a>19、Link传值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">传数据</span><br><span class="line">&lt;Link to=&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    pathname:<span class="string">`/garbagedelivery/TrashBag/TrashBagDetail`</span>,</span><br><span class="line">    state:record,</span><br><span class="line">    或</span><br><span class="line">    state:&#123;</span><br><span class="line">             ad_dateSource:<span class="keyword">this</span>.state.ad_record,</span><br><span class="line">             play_plan:<span class="keyword">this</span>.state.selectedRows,</span><br><span class="line">          &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&gt;</span><br><span class="line">&lt;Button&gt;....</span><br><span class="line">&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">取数据</span></span><br><span class="line"><span class="regexp">Data:this.props.location.state, /</span><span class="regexp">/ Link传入的数据</span></span><br></pre></td></tr></table></figure><h3 id="20、PUT-POST-GET"><a href="#20、PUT-POST-GET" class="headerlink" title="20、PUT POST GET"></a>20、PUT POST GET</h3><p><strong>方发之间的区别：</strong></p><blockquote><p><strong>1、PUT和POST</strong></p><p>PUT和POS都有更改指定URI的语义.但PUT被定义为idempotent的方法，POST则不是.idempotent的方法:如果一个方法重复执行</p><p>多次，产生的效果是一样的，那就是idempotent的。也就是说：</p><p>PUT请求：如果两个请求相同，后一个请求会把第一个请求覆盖掉。（所以PUT用来改资源）</p><p>Post请求：后一个请求不会把第一个请求覆盖掉。（所以Post用来增资源）</p><p><strong>2、get和post</strong></p><p>1、GET参数通过URL传递，POST放在Request body中。</p><p>2、GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p><p>3、GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p><p>4、Get 请求中有非 ASCII 字符，会在请求之前进行转码，POST不用，因为POST在Request body中，通过 MIME，也就可以传输非 ASCII 字符。</p><p>5、 一般我们在浏览器输入一个网址访问网站都是GET请求</p><p>6、HTTP的底层是TCP/IP。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。但是请求的数据量太大对浏览器和服务器都是很大负担。所以业界有了不成文规定，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。</p><p>7、GET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>8、在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。但并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p></blockquote><h3 id="21、获取回收指南（二进制文件流）"><a href="#21、获取回收指南（二进制文件流）" class="headerlink" title="21、获取回收指南（二进制文件流）"></a>21、获取回收指南（二进制文件流）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getRecyclGuide=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  fetch(rootPath1+<span class="string">"/api/garbage/delivery/classification/query/getRecyclGuide"</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.blob().then(<span class="function">(<span class="params">blob</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> html = <span class="keyword">new</span> FileReader();</span><br><span class="line">      html.readAsText(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      html.onload=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result=<span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</span><br><span class="line">        result.innerHTML=html.result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22、字节流base-64解码"><a href="#22、字节流base-64解码" class="headerlink" title="22、字节流base-64解码"></a>22、字节流base-64解码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t=atob(base64)   <span class="comment">//window.btoa 与 window.atob 不支持中文</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">window</span>.btoa(<span class="built_in">encodeURIComponent</span>(<span class="string">'中文'</span>))</span><br><span class="line"><span class="string">"JUU0JUI4JUFEJUU2JTk2JTg3"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">decodeURIComponent</span>(<span class="built_in">window</span>.atob(<span class="string">'JUU0JUI4JUFEJUU2JTk2JTg3'</span>))</span><br><span class="line"><span class="string">"中文"</span></span><br></pre></td></tr></table></figure><h3 id="23、JS计算日期相差天数：2021-01-01-2021-01-03"><a href="#23、JS计算日期相差天数：2021-01-01-2021-01-03" class="headerlink" title="23、JS计算日期相差天数：2021-01-01   2021-01-03"></a>23、JS计算日期相差天数：2021-01-01   2021-01-03</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetDateDiff</span>(<span class="params">startDate,endDate</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(startDate.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>))).getTime();</span><br><span class="line"><span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(endDate.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>))).getTime();</span><br><span class="line"><span class="keyword">var</span> dates = <span class="built_in">Math</span>.abs((startTime - endTime))/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> dates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24、JS-浅、深拷贝"><a href="#24、JS-浅、深拷贝" class="headerlink" title="24、JS  浅、深拷贝"></a>24、JS  浅、深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"> 浅：</span><br><span class="line"> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> obj2=obj1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 深：</span><br><span class="line"> <span class="number">1</span>、乞丐版——使用<span class="built_in">JSON</span>.stringify()以及<span class="built_in">JSON</span>.parse()不可以拷贝 <span class="literal">undefined</span> ， <span class="function"><span class="keyword">function</span>， <span class="title">RegExp</span> 等等类型的</span></span><br><span class="line"><span class="function"> <span class="title">var</span> <span class="title">obj1</span> = </span>&#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objString = <span class="built_in">JSON</span>.stringify(obj1);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(objString);</span><br><span class="line">obj2.a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.a);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="built_in">Object</span>.assign(target, source)——多层嵌套有问题</span><br><span class="line"> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.b = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.b); <span class="comment">// 5</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.c[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.c); <span class="comment">// ["a", 5, "c"]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.c); <span class="comment">// ["a", 5, "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、递归拷贝</span><br><span class="line"><span class="comment">// 定义一个深拷贝函数  接收目标target参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个变量</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 如果当前需要深拷贝的是一个对象的话</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是一个数组的话</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target)) &#123;</span><br><span class="line">            result = []; <span class="comment">// 将result赋值为一个数组，并且执行遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">                <span class="comment">// 递归克隆数组中的每一项</span></span><br><span class="line">                result.push(deepClone(target[i]))</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">// 判断如果当前的值是null的话；直接赋值为null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target===<span class="literal">null</span>) &#123;</span><br><span class="line">            result = <span class="literal">null</span>;</span><br><span class="line">         <span class="comment">// 判断如果当前的值是一个RegExp对象的话，直接赋值    </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target.constructor===<span class="built_in">RegExp</span>)&#123;</span><br><span class="line">            result = target;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 否则是普通对象，直接for in循环，递归赋值对象的所有值</span></span><br><span class="line">            result = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">                result[i] = deepClone(target[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">// 如果不是对象的话，就是基本数据类型，那么直接赋值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = target;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 返回最终结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">        <span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            c: <span class="regexp">/a/</span>,</span><br><span class="line">            d: <span class="literal">undefined</span>,</span><br><span class="line">            b: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">        &#125;,</span><br><span class="line">        c: [</span><br><span class="line">            &#123;</span><br><span class="line">                a: <span class="string">'c'</span>,</span><br><span class="line">                b: <span class="regexp">/b/</span>,</span><br><span class="line">                c: <span class="literal">undefined</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'a'</span>,</span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> obj2 = deepClone(obj1);</span><br><span class="line">        <span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//base64可能有用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBase64</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(reader.result);</span><br><span class="line">    reader.onerror = <span class="function"><span class="params">error</span> =&gt;</span> reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> previewImage = <span class="keyword">await</span> getBase64(file.originFileObj);</span><br><span class="line"></span><br><span class="line"> &lt;img alt=<span class="string">"example"</span> style=&#123;&#123; <span class="attr">width</span>: <span class="string">'100%'</span> &#125;&#125; src=&#123;previewImage&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="25、保留小数点后两位"><a href="#25、保留小数点后两位" class="headerlink" title="25、保留小数点后两位"></a>25、保留小数点后两位</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(number * <span class="number">100</span>) / <span class="number">100</span>  <span class="comment">// 四舍五入</span></span><br><span class="line">number.toFixed(<span class="number">2</span>)  <span class="comment">//无四舍五入</span></span><br></pre></td></tr></table></figure><h3 id="26、HTTP协议POST服务器：json与form表单的区别"><a href="#26、HTTP协议POST服务器：json与form表单的区别" class="headerlink" title="26、HTTP协议POST服务器：json与form表单的区别"></a>26、HTTP协议POST服务器：json与form表单的区别</h3><p>1、form</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">头：数据类型：Content-Type:application/x-www-form-urlencoded（数据格式）;charset=UTF<span class="number">-8</span>（编码格式）</span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">'xxx'</span>,xxx);</span><br><span class="line">fetch(<span class="string">'xxx'</span>,&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    body: formData,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;...&#125;)</span><br></pre></td></tr></table></figure><p>2、json（对象数组）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">头：数据类型：Content-Type:application/json（数据格式）;charset=UTF<span class="number">-8</span>（编码格式，根据情况填写）</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> Obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Obj.xxx = xxx;</span><br><span class="line">arr.push(Obj);</span><br><span class="line">fetch(<span class="string">'xxx'</span>,&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(arr),<span class="comment">//或直接[JSON.stringify(&#123;xxx:xxx,xxx:xxx&#125;)] （可能）</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;...&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Ant Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ant Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd——获取表格Table指定行的数据</title>
      <link href="/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近项目中，依然负责前端这一块，数据被装到Table表格里面，点击编辑需要自动获取到那一行的数据，然后自动打开一个Form表单窗口，把这一行的数据自动填上Form表单中作为初始值，最后你就可以通过Form表单修改内容，调用接口重新渲染一下数据，这就完成了编辑功能。</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/1595646004(1).png" alt="1595646004(1)"></p><h1 id="问题：如何获取那一行的数据"><a href="#问题：如何获取那一行的数据" class="headerlink" title="问题：如何获取那一行的数据"></a>问题：如何获取那一行的数据</h1><p>查阅官网<a href="https://ant.design/components/overview-cn/" target="_blank" rel="noopener">antd组件</a>里面有个render函数，描述情况是：render——生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return 里面可以设置表格行/列合并——function(text, record, index) {}</p><p>我要使用record来获取那一行数据，于是按下面图片写代码就实现了</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BCTable%E6%8C%87%E5%AE%9A%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE/image-20200725112256975.png" alt="image-20200725112256975"></p><p><strong>注：render一定要写两个参数（text, record），调用点击编辑函数onClick()一定要按上图所示，不然会报错！！！</strong></p><br><br><br><p>这么简单就能成功，但是过程是十分艰辛的，花了好几个小时，百度了好多文章，再叨唠一下，参数一定要加上，而且一定要用  <code>（）=&gt; this.函数（record）</code> 这样才能获取到行数据，百度到的<code>this.函数.bind(rec)</code>我是不能成功，不知道你们能不能成功</p><br><p>老规矩，欢迎留言！</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Ant Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Ant Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd——Form.Item下的子组件value值不生效问题</title>
      <link href="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近做的项目前端是用React+Ant Design，在表单<code>&lt;Form&gt;</code>组件下，有好几个<code>&lt;Form.Item&gt;</code>，其中两个<code>&lt;Form.Item&gt;</code>下有<code>&lt;Select&gt;</code>，里面有固定的<code>&lt;Option&gt;</code>，具体如下图所示：</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/1595641213(1).png" alt="1595641213(1)"></p><hr><h1 id="Question1：select选择器的默认值提交后显示未定义"><a href="#Question1：select选择器的默认值提交后显示未定义" class="headerlink" title="Question1：select选择器的默认值提交后显示未定义"></a>Question1：<code>select选择器</code>的默认值提交后显示未定义</h1><p>在<a href="https://ant.design/components/overview-cn/" target="_blank" rel="noopener">antd组件</a>中查看到，被设置了 <code>name</code> 属性的 <code>Form.Item</code> 包装的控件，表单控件会自动添加 <code>value</code>（或 <code>valuePropName</code> 指定的其他属性） <code>onChange</code>（或 <code>trigger</code> 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：</p><ol><li>你不再需要也不应该用 <code>onChange</code> 来做数据收集同步（你可以使用 Form 的 <code>onValuesChange</code>），但还是可以继续监听 <code>onChange</code> 事件。</li><li>你不能用控件的 <code>value</code> 或 <code>defaultValue</code> 等属性来设置表单域的值，默认值可以用 Form 里的 <code>initialValues</code> 来设置。注意 <code>initialValues</code> 不能被 <code>setState</code> 动态更新，你需要用 <code>setFieldsValue</code> 来更新。</li><li>你不应该用 <code>setState</code>，可以使用 <code>form.setFieldsValue</code> 来动态改变表单值。</li></ol><br><p><u><strong>简单的说，我遇到的问题正如第二段描述的那样，form控件很贴心的给我们准备了<code>initialValues</code></strong></u> </p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/image-20200725095523218.png" alt="image-20200725095523218"></p><p><u><strong>我们只需要在form控件中加入这个属性就行</strong></u></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form</span><br><span class="line">    name=<span class="string">"xxx"</span></span><br><span class="line">    initialValues=&#123;&#123;   <span class="comment">//赋初始值</span></span><br><span class="line">    FactName: <span class="keyword">this</span>.state.tempDataSource.FactName,</span><br><span class="line">    manuType: <span class="keyword">this</span>.state.tempDataSource.type,</span><br><span class="line">    phone: <span class="keyword">this</span>.state.tempDataSource.phone,</span><br><span class="line">    proModel: <span class="keyword">this</span>.state.tempDataSource.model,</span><br><span class="line">    people: <span class="keyword">this</span>.state.tempDataSource.people,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;<span class="regexp">/Form&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Question2：两个select选择器联动失效"><a href="#Question2：两个select选择器联动失效" class="headerlink" title="Question2：两个select选择器联动失效"></a>Question2：两个<code>select选择器</code>联动失效</h1><p>我举官网上的示例说明一下这个问题</p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/image-20200725100942603.png" alt="image-20200725100942603"></p><p><img src= "/img/loading.gif" data-src="/2020/07/25/antd%E2%80%94%E2%80%94Form-Item%E4%B8%8B%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/image-20200725100958461.png" alt="image-20200725100958461"></p><p>当我选择第一个select值为zhejiang时，第二个选择器自动选择默认的第一个值hangzhou</p><p>当我选择第一个select值为jiangsu时，第二个选择器自动选择默认的第一个值nanjing</p><br><p><strong>但是当你的select选择器嵌套在form表单时，select选择器中的value值失效了，就不能自动获取到另一个select选择器的value值，导致select选择器直接的联动失效，这时候该怎么办呢？</strong></p><br><p>我们可以通过 <code>ref</code> 获取数据域，步骤是：</p><ol><li>定义字段  formRef = React.createRef();</li><li>在select选择器触发选择的函数里面添加   this.formRef.current.setFieldsValue({  …  });</li><li>在Form表单里添加属性    ref={this.formRef}</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">formRef = React.createRef&lt;FormInstance&gt;();</span><br><span class="line"></span><br><span class="line">    onGenderChange = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.formRef.current.setFieldsValue(&#123;</span><br><span class="line">          ...<span class="comment">//设置第二个select选择器的值</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">      &lt;Form  ref=&#123;<span class="keyword">this</span>.formRef&#125; name=<span class="string">"xxx"</span> onFinish=&#123;<span class="keyword">this</span>.onFinish&#125;&gt;</span><br><span class="line">                ...</span><br><span class="line">                &lt;Select onGenderChange&gt;  ...   &lt;<span class="regexp">/Select&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Select&gt;  ...   &lt;/</span>Select&gt;</span><br><span class="line">      &lt;<span class="regexp">/Form&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><br><br><br><br><br><br><br><p><strong>到此我遇到的两个问题解决了，如果你们有什么疑问或者遇到什么新的问题欢迎留言讨论！！！</strong></p><br><br><br><br><br><br><br>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Ant Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Ant Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加快访问速度+设置个人域名</title>
      <link href="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/"/>
      <url>/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、加快访问速度"><a href="#一、加快访问速度" class="headerlink" title="一、加快访问速度"></a>一、加快访问速度</h1><p>hexo+github访问速度超慢！！！</p><ul><li><p>原因：托管网站的github是外网，访问外网速度慢。</p></li><li><p>解决方法：采用hexo+github+coding</p></li></ul><p>（coding：大家可以理解为中国版的github，如果把代码既托管到coding上，又托管到github上，让大陆的用户访问的是由coding托管的网站，境外的用户访问的是由github托管的网站，这样访问速度就能上去了）</p><h2 id="1、创建coding账号"><a href="#1、创建coding账号" class="headerlink" title="1、创建coding账号"></a>1、创建<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>账号</h2><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720160527550.png" alt="image-20200720160527550"></p><h2 id="2、创建与账号同名的项目"><a href="#2、创建与账号同名的项目" class="headerlink" title="2、创建与账号同名的项目"></a>2、创建与账号同名的项目</h2><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720160603944.png" alt="image-20200720160603944"></p><p>点击进入项目→右下角项目设置→功能开关，建议都打开，方便部署静态网站</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720163003596.png" alt="image-20200720163003596"></p><h2 id="3、修改站点配置文件-config-yml"><a href="#3、修改站点配置文件-config-yml" class="headerlink" title="3、修改站点配置文件_config.yml"></a>3、修改站点配置文件<code>_config.yml</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#格式一定要正确，不然会报错</span><br><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: </span><br><span class="line">      github:</span><br><span class="line">          https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io</span><br><span class="line">      coding:</span><br><span class="line">          https:&#x2F;&#x2F;e.coding.net&#x2F;xxx&#x2F;xxx&#x2F;xxx.git</span><br><span class="line">  branch: &#39;master&#39;</span><br></pre></td></tr></table></figure><p>主页→项目→xxx→代码仓库→设置，复制粘贴到coding下</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720162119597.png" alt="image-20200720162119597"></p><h2 id="4、远端部署"><a href="#4、远端部署" class="headerlink" title="4、远端部署"></a>4、远端部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>这样本地博客就能同时同步到github和coding</p><h2 id="5、静态网站部署"><a href="#5、静态网站部署" class="headerlink" title="5、静态网站部署"></a>5、静态网站部署</h2><p>点击项目左边菜单栏 持续部署→静态网站</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720163758840.png" alt="image-20200720163758840"></p><br><h1 id="二、设置个人域名"><a href="#二、设置个人域名" class="headerlink" title="二、设置个人域名"></a>二、设置个人域名</h1><h2 id="1、购买域名"><a href="#1、购买域名" class="headerlink" title="1、购买域名"></a>1、购买域名</h2><p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5" target="_blank" rel="noopener">阿里云</a>上买一个域名，我买的是 <code>giser.online</code>（是最便宜的，8块钱一年），各个后缀的价格不太一样，之后实名认证，然后在域名控制台中看到你购买的域名。</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720154241154.png" alt="image-20200720154241154"></p><h2 id="2、解析域名"><a href="#2、解析域名" class="headerlink" title="2、解析域名"></a>2、解析域名</h2><p>点击上图解析，增加一条CNAME信息，记录值为部署静态网站中的访问地址，此为境内访问coding</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164020891.png" alt="image-20200720164020891"></p><p>继续解析，增加一条CNAME信息，记录值为youruser.github.io （youruser为你的github用户名）,此为境外访问github</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164302658.png" alt="image-20200720164302658"></p><p>最终结果为下图：</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720154630256.png" alt="image-20200720154630256"></p><h2 id="3、绑定域名"><a href="#3、绑定域名" class="headerlink" title="3、绑定域名"></a>3、绑定域名</h2><p>登录github，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164706261.png" alt="image-20200720164706261"></p><p>登录coding，进入之前创建的仓库，点击静态网站→右上角设置→自定义域名，输入你的域名</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/image-20200720164914047.png" alt="image-20200720164914047"></p><br><p>*<u><strong>ps：此方法只需要花点小钱买个域名，不需要专门去买服务器，完成上述操作后需耐心等待一段时间就能登录自己的域名访问博客（现在国内政策是域名要备案，不然要被封网站，不过好像备案需要买个服务器，购买服务器可是一笔不小的开支）</strong></u>*</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2020/07/16/%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/07/16/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="note default">            <p>default 提示块标籤</p>          </div><div class="note primary no-icon">            <p>primary 提示块标籤</p>          </div><div class="note success">            <p>success 提示块标籤</p>          </div><div class="note info">            <p>info 提示块标籤</p>          </div><div class="note warning">            <p>warning 提示块标籤</p>          </div><div class="note danger">            <p>danger 提示块标籤</p>          </div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站专栏文章复制</title>
      <link href="/2020/07/16/B%E7%AB%99%E4%B8%93%E6%A0%8F%E6%96%87%E7%AB%A0%E5%A4%8D%E5%88%B6/"/>
      <url>/2020/07/16/B%E7%AB%99%E4%B8%93%E6%A0%8F%E6%96%87%E7%AB%A0%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="pc端b站专栏文章不可复制，在控制台执行一下代码即可"><a href="#pc端b站专栏文章不可复制，在控制台执行一下代码即可" class="headerlink" title="pc端b站专栏文章不可复制，在控制台执行一下代码即可"></a>pc端b站专栏文章不可复制，在控制台执行一下代码即可</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'div.article-holder'</span>).classList.remove(<span class="string">'unable-reprint'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'div.article-holder'</span>).addEventListener(<span class="string">'copy'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.clipboardData.setData(<span class="string">"text"</span>,<span class="built_in">window</span>.getSelection().toString())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//移除'不可复制'属性，添加事件监听</span></span><br></pre></td></tr></table></figure><br><br><br><br><br><p>版权声明：本文为CSDN博主「Haip」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p><p>原文链接：<a href="https://blog.csdn.net/u014324940/article/details/105101547/" target="_blank" rel="noopener">https://blog.csdn.net/u014324940/article/details/105101547/</a></p>]]></content>
      
      
      <categories>
          
          <category> Bilibili </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、本地部署"><a href="#一、本地部署" class="headerlink" title="一、本地部署"></a>一、本地部署</h1><h2 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h2><p>windows：到git官网上下载，<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>，下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git，不用自带的cmd，因为它有点难用。</p><h2 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h2><p>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a> 选择LTS版本就行了。</p><h2 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h2><p>右键Git Bash Here，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo -cli&#x2F;&#x2F;若出错请看下文踩坑部分</span><br></pre></td></tr></table></figure><p>安装完毕后文件路径在你安装的node.js文件下的node_global\node_modules\hexo</p><h2 id="4、初始化Hexo"><a href="#4、初始化Hexo" class="headerlink" title="4、初始化Hexo"></a>4、初始化Hexo</h2><p>在你想创建Blog文件夹的磁盘下面右键Git Bash Here，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init Blog</span><br><span class="line">cd Blog &#x2F;&#x2F;进入这个myblog文件夹，也可以直接右键创建好的Blog文件夹点击Git Bash Here</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>继续输入命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g&#x2F;&#x2F;或者 hexo generate</span><br><span class="line">hexo s&#x2F;&#x2F;或者hexo server</span><br></pre></td></tr></table></figure><p>启动hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了，使用ctrl+c可以把服务关掉。</p><p><em>tip：所有的操作都基于Blog文件夹，如若出错大不了直接删除Blog重新来，不要畏手畏脚</em></p><h1 id="二、远端部署"><a href="#二、远端部署" class="headerlink" title="二、远端部署"></a>二、远端部署</h1><h2 id="1、登录或注册GitHub账户"><a href="#1、登录或注册GitHub账户" class="headerlink" title="1、登录或注册GitHub账户"></a>1、登录或注册GitHub账户</h2><p>登录后或注册完（tip:注册一个你觉得好听的名字，关系到后面的域名），在GitHub.com中看到一个New repository，新建仓库</p><p>必须创建一个和你用户名xxx相同的仓库，后面加.github.io（xxx.github.io //这就是名字取好听点的原因）</p><h2 id="2、将hexo部署到GitHub"><a href="#2、将hexo部署到GitHub" class="headerlink" title="2、将hexo部署到GitHub"></a>2、将hexo部署到GitHub</h2><p>打开Blog文件夹下面的配置文件 <code>_config.yml</code>，翻到最后，修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令，这样你才能用命令部署到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &#x2F;&#x2F;或hexo clean       清除了你之前生成的东西，网页没什么错误基本不用</span><br><span class="line">hexo g &#x2F;&#x2F;或hexo generate     或生成静态文章</span><br><span class="line">hexo d &#x2F;&#x2F;或hexo deploy       部署文章</span><br></pre></td></tr></table></figure><p><em>注意：远端部署一定要先 <code>hexo g</code>，然后 <code>hexo d</code></em></p><p>当然如果觉得这个网址逼格不太够，你可以自己花点小钱购买个域名，具体操作请百度</p><h1 id="三、写博客"><a href="#三、写博客" class="headerlink" title="三、写博客"></a>三、写博客</h1><h2 id="1、布局"><a href="#1、布局" class="headerlink" title="1、布局"></a>1、布局</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="center">布局</th><th align="center">路径</th></tr></thead><tbody><tr><td align="center">post</td><td align="center">source/_posts</td></tr><tr><td align="center">page</td><td align="center">source</td></tr><tr><td align="center">draft</td><td align="center">source/_drafts</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;xxx&quot; &#x2F;&#x2F;或者hexo new &quot;xxx&quot;、 hexo new post &quot;xxx&quot; (有引号)</span><br></pre></td></tr></table></figure><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &quot;xxx&quot;  (有引号)</span><br></pre></td></tr></table></figure><p>这样会在source/_draft中新建一个xxx.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 <code>hexo server --draft</code> 在本地端口中开启服务预览。如果你的草稿文件写完了，想要发表到post中，可以使用<code>hexo publish draft xxx</code> ，就会自动把xxx.md发送到post中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page xxx  (无引号)</span><br></pre></td></tr></table></figure><p>另起一页，系统会自动给你在source文件夹下创建一个xxx文件夹，以及xxx文件夹中的index.md，这样你访问的xxx对应的链接就是<code>http://localhost:4000/xxx 或者 域名/xxx</code></p><h2 id="2、内容"><a href="#2、内容" class="headerlink" title="2、内容"></a>2、内容</h2><p>如果不会MarkDown语法写文章，推荐下载<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>，轻松写博客。</p><h1 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h1><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<a href="https://hexo.io/themes/" target="_blank" rel="noopener">点这里</a></p><p>兄弟们也可以参考我使用的主题，个人感觉还是挺漂亮的，步骤如下：</p><h2 id="1、下载主题"><a href="#1、下载主题" class="headerlink" title="1、下载主题"></a>1、下载主题</h2><p>右键Blog文件夹，点击Git Bash Here，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>下载好的主题在<code>Blog\themes\butterfly</code>可以查看到</p><h2 id="2、应用主题"><a href="#2、应用主题" class="headerlink" title="2、应用主题"></a>2、应用主题</h2><p>修改站点配置文件<code>_config.yml</code>，把主題改为<code>butterfly</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h1 id="五、Hexo踩坑之路"><a href="#五、Hexo踩坑之路" class="headerlink" title="五、Hexo踩坑之路"></a>五、Hexo踩坑之路</h1><h2 id="1、npm-install-g-hexo-cli-命令错误"><a href="#1、npm-install-g-hexo-cli-命令错误" class="headerlink" title="1、npm install -g hexo -cli 命令错误"></a>1、<code>npm install -g hexo -cli</code> 命令错误</h2><p>安装hexo中出现报错<code>npm WARN deprecated hexo-bunyan@2.0.0: Please see https://github.com/hexojs/hexo-bunyan/issues/17</code></p><p>解决办法：将<code>npm install -g hexo -cli</code>改成<code>npm install -g hexo -log</code></p><p>问题分析：根据报错给出的网站 <code>https://github.com/hexojs/hexo-bunyan/issues/17</code>来看，hexo-log v2.0.0发布后就不再推荐使用hexo-bunyan，猜想hexo官方文档给出的npm install -g hexo-cli命令默认安装hexo-bunyan，尝试改成hexo-log之后就可以继续下一步了。</p><h2 id="2、Typora写博客时网页图片加载失败"><a href="#2、Typora写博客时网页图片加载失败" class="headerlink" title="2、Typora写博客时网页图片加载失败"></a>2、Typora写博客时网页图片加载失败</h2><p>解决办法：</p><ul><li><p>首先把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p></li><li><p>其次下载安装一个可以上传本地图片的插件<code>hexo-asset-image</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save  &#x2F;&#x2F;下载插件</span><br><span class="line">hexo n &quot;xxx&quot;  &#x2F;在下载完插件后，使用hexo命令新建文章时，posts目录下会生成同名文件夹；</span><br><span class="line">#远端部署</span><br><span class="line">hexo g  &#x2F;&#x2F;在文件夹里可以存放相应的图片，然后在hexo g编译文件的时候，图片会自动生成到public中</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>然后设置Typora–文件–偏好设置</li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Typora%E8%AE%BE%E7%BD%AE.png" alt="1594900826(1)"></p><ul><li>最后把图片拖动到Typora中，点击<code>复制图片到</code>同名文件夹中，最后图片成功在网页中显示</li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84.png" alt="1594901055(1)"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
